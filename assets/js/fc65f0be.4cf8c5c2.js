"use strict";(self.webpackChunk_ima_docs=self.webpackChunk_ima_docs||[]).push([[1956],{6629:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"basic-features/seo-and-meta-manager","title":"SEO & Meta Manager","description":"Basic features > SEO & Meta Manager","source":"@site/../docs/basic-features/seo-and-meta-manager.md","sourceDirName":"basic-features","slug":"/basic-features/seo-and-meta-manager","permalink":"/basic-features/seo-and-meta-manager","draft":false,"unlisted":false,"editUrl":"https://github.com/seznam/ima/tree/master/docs/../docs/basic-features/seo-and-meta-manager.md","tags":[],"version":"current","lastUpdatedBy":"Jan \u0160ime\u010dek","lastUpdatedAt":1761308686000,"frontMatter":{"title":"SEO & Meta Manager","description":"Basic features > SEO & Meta Manager"},"sidebar":"docs","previous":{"title":"Page State","permalink":"/basic-features/page-state"},"next":{"title":"Dictionary","permalink":"/basic-features/dictionary"}}');var r=n(2540),s=n(3023);const i={title:"SEO & Meta Manager",description:"Basic features > SEO & Meta Manager"},o=void 0,l={},d=[{value:"Managing meta tags",id:"managing-meta-tags",level:2},{value:"setTitle()",id:"settitle",level:3},{value:"setMetaName()",id:"setmetaname",level:3},{value:"setMetaProperty()",id:"setmetaproperty",level:3},{value:"setLink()",id:"setlink",level:3},{value:"Meta value getters",id:"meta-value-getters",level:2},{value:"Rendering meta tags",id:"rendering-meta-tags",level:2},{value:"Rendering on server using the <code>#{meta}</code> content variable",id:"rendering-on-server-using-the-meta-content-variable",level:3},{value:"Rendering on client using <code>PageMetaHandler</code>",id:"rendering-on-client-using-pagemetahandler",level:3},{value:"Global meta tags",id:"global-meta-tags",level:3}];function c(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["If you've read the ",(0,r.jsx)(t.a,{href:"./controller-lifecycle",children:"Controller lifecycle"})," page you've\nprobably come along the ",(0,r.jsx)(t.a,{href:"/basic-features/controller-lifecycle#setmetaparams-serverclient",children:(0,r.jsx)(t.code,{children:"setMetaParams"})}),"\nmethod. This method is dedicated to set meta information for a specific\npage and you are provided with everything you need ",(0,r.jsx)(t.em,{children:"(current state, MetaManager,\nrouter, dictionary and settings)"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["Meta manager offers many methods to work with document meta data. From ",(0,r.jsx)(t.code,{children:"#{meta}"})," content variable, to methods for managing ",(0,r.jsx)(t.strong,{children:"title"})," and other ",(0,r.jsx)(t.strong,{children:"meta"})," tags collections."]}),"\n",(0,r.jsx)(t.h2,{id:"managing-meta-tags",children:"Managing meta tags"}),"\n",(0,r.jsxs)(t.p,{children:["As mentioned above, all meta management is done in ",(0,r.jsx)(t.code,{children:"setMetaParams"})," method in ",(0,r.jsx)(t.strong,{children:"route controller"}),". Using ",(0,r.jsx)(t.code,{children:"metaManager"})," and provied setters for ",(0,r.jsx)(t.strong,{children:"title"}),", ",(0,r.jsx)(t.strong,{children:"meta name"}),", ",(0,r.jsx)(t.strong,{children:"meta properties"})," and ",(0,r.jsx)(t.strong,{children:"link"})," collections, you can manage contents of your meta tags easily with the help of additional arguments that provide everything you need (current state, MetaManager, router, dictionary and settings)."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",metastring:"title=./app/page/order/OrderController.js",children:"setMetaParams(loadedResources, metaManager, router, dictionary, settings) {\n  const { order } = loadedResources;\n\n  metaManager.setTitle(`Order #${order.id} - ${settings.general.appTitle}`);\n  metaManager.setMetaName(\n    'description',\n    'Lorem ipsum dolor sit amet, consectetur adipiscing elit.'\n  );\n\n  metaManager.setMetaProperty('og:image', order.thumbnailUrl);\n\n  const orderDetailLink = router.link('order-detail', {\n    orderId: order.id\n  });\n\n  metaManager.setLink('canonical', orderDetailLink);\n}\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"undefined"})," and ",(0,r.jsx)(t.code,{children:"null"})," values are filtered out when rendering meta tags. If you still want to render meta tags with empty values, use empty strings ",(0,r.jsx)(t.code,{children:"''"}),"."]})}),"\n",(0,r.jsx)(t.h3,{id:"settitle",children:"setTitle()"}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"(title: string) => MetaManager"})}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Use to set document title."}),"\n",(0,r.jsx)(t.h3,{id:"setmetaname",children:"setMetaName()"}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"(name: string, content: MetaValue, attr?: MetaAttributes) => MetaManager"})}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Sets the information to be used in ",(0,r.jsx)(t.code,{children:'<meta name="..." content="..." />'}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"setmetaproperty",children:"setMetaProperty()"}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"(name: string, property: MetaValue, attr?: MetaAttributes) => MetaManager"})}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["These methods are similar to the two above except that these are used for ",(0,r.jsx)(t.code,{children:'<meta property="..." content="..." />'}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"setlink",children:"setLink()"}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"(relation: string, href: MetaValue, attr?: MetaAttributes) => MetaManager"})}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Adds information to the MetaManager to be later used in ",(0,r.jsx)(t.code,{children:'<link rel="..." href="..." />'})," tag."]}),"\n",(0,r.jsxs)(t.admonition,{type:"tip",children:[(0,r.jsx)(t.p,{children:"All 3 methods defined above also supports additional optional attributes. This is an object of key-value pairs representing additional meta tag attributes that are used in certain situations."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"\nmetaManager.setMetaProperty('og:image', order.thumbnailUrl, {\n  size: 'large',\n  authorUrl: 'https://mysite.com'\n});\n\n"})})]}),"\n",(0,r.jsxs)(t.admonition,{type:"caution",children:[(0,r.jsx)(t.p,{children:"Be cautious when using headers or the 'http-equiv' meta attribute."}),(0,r.jsxs)(t.p,{children:["Using ",(0,r.jsx)(t.strong,{children:"MetaManager does not automatically protect you against Open Redirect"})," attack in case you're using values taken from any unsafe sources."]}),(0,r.jsx)(t.p,{children:"Ensure that all values are properly sanitized, validated and safe to use, so they can not redirect your users to potentially malicious sites."})]}),"\n",(0,r.jsx)(t.h2,{id:"meta-value-getters",children:"Meta value getters"}),"\n",(0,r.jsx)(t.p,{children:"Each setter has corresponding getter returning and object with key-value pairs representing the meta tag values. Additionally you can use key and value iterator methods."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"getTitle()"})}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"getMetaName()"}),", ",(0,r.jsx)(t.code,{children:"getMetaNames()"}),", ",(0,r.jsx)(t.code,{children:"getMetaNamesIterator()"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"getMetaProperty()"}),", ",(0,r.jsx)(t.code,{children:"setMetaProperties()"}),", ",(0,r.jsx)(t.code,{children:"setMetaPropertiesIterator()"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"getLink()"}),", ",(0,r.jsx)(t.code,{children:"getLinks()"}),", ",(0,r.jsx)(t.code,{children:"getLinksIterator()"})]}),"\n"]}),"\n",(0,r.jsxs)(t.admonition,{type:"tip",children:[(0,r.jsx)(t.p,{children:"Since the getter methods return object with key-value attributes where their names correspond to the html tag attribute name, you can use following shortcuts to render (these include optional attributes):"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",children:"<meta\n  property=\"og:image\"\n  {...this.props.metaManager.getMetaProperty('og:image')}\n/>\n<meta\n  link=\"canonical\"\n  {...this.props.metaManager.getLink('canonical')}\n/>\n"})})]}),"\n",(0,r.jsx)(t.h2,{id:"rendering-meta-tags",children:"Rendering meta tags"}),"\n",(0,r.jsx)(t.p,{children:"Meta tags are handled differently on server an client, see following sections for more information on this matter."}),"\n",(0,r.jsxs)(t.h3,{id:"rendering-on-server-using-the-meta-content-variable",children:["Rendering on server using the ",(0,r.jsx)(t.code,{children:"#{meta}"})," content variable"]}),"\n",(0,r.jsxs)(t.p,{children:["While you can manually render meta tags in the document view using ",(0,r.jsx)(t.code,{children:"metaManger"})," and any of the provided getter methods or iterators, we also render these tags automatically into ",(0,r.jsx)(t.code,{children:"#{meta}"})," content variable."]}),"\n",(0,r.jsxs)(t.p,{children:["You can then use this content variable in ",(0,r.jsx)(t.code,{children:"DocumentView"})," to easily render whole meta collection (including ",(0,r.jsx)(t.strong,{children:"document title"}),") matching meta information set for current controller in ",(0,r.jsx)(t.code,{children:"setMetaParams"})," method."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",metastring:"title=./app/document/DocumentView.jsx",children:"<head>\n  // highlight-next-line\n  {'#{meta}'}\n  {'#{styles}'}\n  {'#{revivalSettings}'}\n  {'#{runner}'}\n</head>\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["While you can also use this content variable in ",(0,r.jsx)(t.code,{children:"spa.ejs"}),", it will always be empty, since client rendering is handled separately. See the ",(0,r.jsx)(t.a,{href:"#rendering-on-client-using-pagemetahandler",children:"next section"})," for more information."]})}),"\n",(0,r.jsxs)(t.h3,{id:"rendering-on-client-using-pagemetahandler",children:["Rendering on client using ",(0,r.jsx)(t.code,{children:"PageMetaHandler"})]}),"\n",(0,r.jsxs)(t.p,{children:["You may have noticed that the server-side rendered meta tags have ",(0,r.jsx)(t.code,{children:"data-ima-meta"})," data attribute. This ",(0,r.jsx)(t.strong,{children:"serves as an identification for meta tags that are handled by IMA.js"})," (both on server and client). These also correspond to the values you have set using ",(0,r.jsx)(t.code,{children:"metaManager"})," setters."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-html",children:'<meta data-ima-meta name="twitter:title" content="IMA.js">\n'})}),"\n",(0,r.jsxs)(t.p,{children:["While navigating between pages in SPA, the meta tags are** updated automatically** using ",(0,r.jsx)(t.code,{children:"PageMetaHandler"}),". This manager always ",(0,r.jsx)(t.strong,{children:"removes old meta tags"})," identified by the data attribute, before rendering new ones. And since ",(0,r.jsx)(t.code,{children:"metaManager"})," clears it's meta collection between routes, this means that each page renders only those tags that are set in ",(0,r.jsx)(t.code,{children:"metaManager"})," in current page controller using ",(0,r.jsx)(t.code,{children:"setMetaParams"})," method."]}),"\n",(0,r.jsx)(t.h3,{id:"global-meta-tags",children:"Global meta tags"}),"\n",(0,r.jsxs)(t.p,{children:['Now that you know how IMA.js handles meta tag updates between routes, you may ask yourself a question "how to handle global meta tags like ',(0,r.jsx)(t.code,{children:"viewport"}),", ",(0,r.jsx)(t.code,{children:"charset"}),' etc.?"']}),"\n",(0,r.jsxs)(t.p,{children:["The solution is pretty simple - just define them in ",(0,r.jsx)(t.code,{children:"DocumentView"})," and ",(0,r.jsx)(t.code,{children:"spa.ejs"})," templates, tags that don't have ",(0,r.jsx)(t.code,{children:"data-ima-meta"})," attribute are not touched at all by the ",(0,r.jsx)(t.code,{children:"PageMetaHandler"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",metastring:"title=./app/document/DocumentView.jsx",children:"<head>\n  // highlight-next-line\n  <meta charSet='utf-8' />\n  // highlight-next-line\n  <meta httpEquiv='X-UA-Compatible' content='IE=edge' />\n  // highlight-next-line\n  <meta name='viewport' content='width=device-width, initial-scale=1' />\n</head>\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Alternative solution is to always set these values in every page controller you have. For this you can use helpers or create custom ",(0,r.jsx)(t.code,{children:"AbstractController"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},3023:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var a=n(3696);const r={},s=a.createContext(r);function i(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);