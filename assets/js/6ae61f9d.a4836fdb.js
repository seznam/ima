"use strict";(self.webpackChunk_ima_docs=self.webpackChunk_ima_docs||[]).push([[6504],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:r,o[1]=p;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8609:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var a=n(5773),r=(n(7294),n(3905));const i={title:"Testing",description:"Basic features > Testing"},o=void 0,p={unversionedId:"basic-features/testing",id:"basic-features/testing",title:"Testing",description:"Basic features > Testing",source:"@site/../docs/basic-features/testing.md",sourceDirName:"basic-features",slug:"/basic-features/testing",permalink:"/basic-features/testing",draft:!1,editUrl:"https://github.com/seznam/ima/tree/master/docs/../docs/basic-features/testing.md",tags:[],version:"current",lastUpdatedBy:"PS",lastUpdatedAt:1736752325,formattedLastUpdatedAt:"Jan 13, 2025",frontMatter:{title:"Testing",description:"Basic features > Testing"},sidebar:"docs",previous:{title:"TypeScript",permalink:"/basic-features/typescript"},next:{title:"Dynamic imports",permalink:"/advanced-features/dynamic-imports"}},s={},l=[{value:"API",id:"api",level:2},{value:"renderWithContext",id:"renderwithcontext",level:3},{value:"getContextValue",id:"getcontextvalue",level:3},{value:"initImaApp",id:"initimaapp",level:3},{value:"renderHookWithContext",id:"renderhookwithcontext",level:3},{value:"Extending IMA boot config methods",id:"extending-ima-boot-config-methods",level:2}],c={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@ima/testing-library")," contains utilities for testing IMA.js applications. It provides integration with ",(0,r.kt)("a",{parentName:"p",href:"https://jestjs.io"},"Jest"),", ",(0,r.kt)("a",{parentName:"p",href:"https://testing-library.com/docs/react-testing-library/intro"},"React Testing Library")," and ",(0,r.kt)("a",{parentName:"p",href:"https://testing-library.com/docs/ecosystem-jest-dom"},"Testing Library Jest DOM"),". If you initialized your project via ",(0,r.kt)("inlineCode",{parentName:"p"},"create-ima-app"),", the testing setup is already included in your project. If not, check ",(0,r.kt)("inlineCode",{parentName:"p"},"@ima/testing-library")," README for more information about how to setup testing in your project."),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("p",null,"IMA Testing Library is re-exporting everything from ",(0,r.kt)("inlineCode",{parentName:"p"},"@testing-library/react"),". You should always import React Testing Library functions from ",(0,r.kt)("inlineCode",{parentName:"p"},"@ima/testing-library")," as we might add some additional functionality / wrappers in the future. As such, it provides the same API as ",(0,r.kt)("inlineCode",{parentName:"p"},"@testing-library/react")," with some additional features."),(0,r.kt)("h3",{id:"renderwithcontext"},"renderWithContext"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"async function renderWithContext(\n  ui: ReactElement,\n  options?: RenderOptions & { contextValue?: ContextValue; app?: ImaApp }\n): Promise<ReturnType<typeof render> & { app: ImaApp | null; contextValue: ContextValue; }>\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"renderWithContext")," is a wrapper around ",(0,r.kt)("a",{parentName:"p",href:"https://testing-library.com/docs/react-testing-library/api#render"},(0,r.kt)("inlineCode",{parentName:"a"},"render")," from ",(0,r.kt)("inlineCode",{parentName:"a"},"@testing-library/react")),". It sets ",(0,r.kt)("inlineCode",{parentName:"p"},"wrapper")," option in ",(0,r.kt)("inlineCode",{parentName:"p"},"render")," method to a real IMA.js context wrapper. It can take additional optional IMA specific options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"contextValue")," - the result of ",(0,r.kt)("inlineCode",{parentName:"li"},"getContextValue")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"app")," - the result of ",(0,r.kt)("inlineCode",{parentName:"li"},"initImaApp")," (if you provide ",(0,r.kt)("inlineCode",{parentName:"li"},"contextValue"),", it does not make any sense to provide ",(0,r.kt)("inlineCode",{parentName:"li"},"app")," as the ",(0,r.kt)("inlineCode",{parentName:"li"},"app")," is only used to generate the ",(0,r.kt)("inlineCode",{parentName:"li"},"contextValue"),")")),(0,r.kt)("p",null,"If any of the options is not provided, it will be generated automatically."),(0,r.kt)("p",null,"Example usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { useLocalize } from '@ima/react-page-renderer';\nimport { renderWithContext } from '@ima/testing-library';\n\nfunction Component({ children }) {\n  const localize = useLocalize(); // Get localize function from IMA.js context\n\n  return <div>{localize('my.translation.key')} {children}</div>;\n}\n\ntest('renders component with localized string', async () => {\n  const { getByText } = await renderWithContext(<Component>My Text</Component>);\n  const textElement = getByText(/My Text/i);\n\n  expect(textElement).toBeInTheDocument();\n});\n")),(0,r.kt)("p",null,"If you had used ",(0,r.kt)("inlineCode",{parentName:"p"},"render")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"@testing-library/react")," directly, the test would have failed because the ",(0,r.kt)("inlineCode",{parentName:"p"},"useLocalize")," hook would be missing the context. The ",(0,r.kt)("inlineCode",{parentName:"p"},"renderWithContext")," function provides the necessary context and making it easier to test components that depend on the IMA.js context."),(0,r.kt)("h3",{id:"getcontextvalue"},"getContextValue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"async function getContextValue(app?: ImaApp): Promise<ContextValue>\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"getContextValue")," is a helper function that returns the context value from the IMA.js app. It can take an optional ",(0,r.kt)("inlineCode",{parentName:"p"},"app")," parameter, which is the result of ",(0,r.kt)("inlineCode",{parentName:"p"},"initImaApp"),"."),(0,r.kt)("p",null,"Example usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"test('renders component with custom context value', async () => {\n  const contextValue = await getContextValue(); // Generate default context value\n\n  contextValue.$Utils.$Foo = jest.fn(() => 'bar'); // Mock some part of the context\n\n  const { getByText } = await renderWithContext(<Component>My Text</Component>, {\n    contextValue, // Provide the custom context value\n  });\n  const textElement = getByText(/My Text/i);\n\n  expect(textElement).toBeInTheDocument();\n});\n")),(0,r.kt)("h3",{id:"initimaapp"},"initImaApp"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"async function initImaApp(): Promise<ImaApp>\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"initImaApp")," is a helper function that initializes the IMA.js app."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"test('renders component with custom app configuration', async () => {\n  const app = await initImaApp(); // Initialize the app\n\n  app.oc.get('$Utils').$Foo = jest.fn(() => 'bar'); // Mock some part of the app\n\n  const { getByText } = await renderWithContext(<Component>My Text</Component>, {\n    app, // Provide the custom app\n  });\n  const textElement = getByText(/My Text/i);\n\n  expect(textElement).toBeInTheDocument();\n});\n")),(0,r.kt)("h3",{id:"renderhookwithcontext"},"renderHookWithContext"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"async function renderHookWithContext<TResult, TProps>(\n  hook: (props: TProps) => TResult,\n  options?: { contextValue?: ContextValue; app?: ImaApp }\n): Promise<ReturnType<typeof renderHook<TResult, TProps>> & { app: ImaApp | null; contextValue: ContextValue; }>\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"renderHookWithContext")," is a wrapper around ",(0,r.kt)("a",{parentName:"p",href:"https://testing-library.com/docs/react-testing-library/api#renderhook"},(0,r.kt)("inlineCode",{parentName:"a"},"renderHook")," from ",(0,r.kt)("inlineCode",{parentName:"a"},"@testing-library/react")),". It uses the same logic as ",(0,r.kt)("inlineCode",{parentName:"p"},"renderWithContext")," to provide the IMA.js context. See ",(0,r.kt)("a",{parentName:"p",href:"#renderwithcontext"},"the ",(0,r.kt)("inlineCode",{parentName:"a"},"renderWithContext")," section")," for more information."),(0,r.kt)("h2",{id:"extending-ima-boot-config-methods"},"Extending IMA boot config methods"),(0,r.kt)("p",null,"You can extend IMA boot config by using ",(0,r.kt)("a",{parentName:"p",href:"https://imajs.io/api/classes/ima_core.PluginLoader/#register"},"IMA ",(0,r.kt)("inlineCode",{parentName:"a"},"pluginLoader.register"))," method. Use the same approach as in IMA plugins."),(0,r.kt)("p",null,"You can either register a plugin loader for all tests by setting it up in a setup file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// jestSetup.js\nimport { pluginLoader } from '@ima/core';\n\n// If you don't care, if this plugin loader is registered first, or last\npluginLoader.register('jestSetup.js', () => {\n  return {\n    initSettings: () => {\n      return {\n        prod: {\n          customSetting: 'customValue'\n        }\n      }\n    }\n  };\n});\n\n// If you need to register the plugin loader after all other plugin loaders\nbeforeAll(() => {\n  pluginLoader.register('jestSetup.js', () => {\n    return {\n      initSettings: () => {\n        return {\n          prod: {\n            customSetting: 'customValue'\n          }\n        }\n      }\n    };\n  });\n});\n\n// jest.config.js\nmodule.exports = {\n  // Add this line to your jest config\n  setupFilesAfterEnv: ['./jestSetup.js']\n};\n")),(0,r.kt)("p",null,"Or you can register a plugin loader for a specific test file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// mySpec.js\nimport { pluginLoader } from '@ima/core';\n\nbeforeAll(() => {\n  pluginLoader.register('mySpec', () => {\n    return {\n      initSettings: () => {\n        return {\n          prod: {\n            customSetting: 'customValue'\n          }\n        }\n      }\n    };\n  });\n});\n\ntest('renders component with custom app configuration', async () => {\n  const { getByText } = await renderWithContext(<Component>My Text</Component>);\n  const textElement = getByText(/My Text/i);\n\n  expect(textElement).toBeInTheDocument();\n});\n")),(0,r.kt)("p",null,"Or you can register a plugin loader for a test file, but make the boot config methods dynamic so you can change them for each test."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// mySpec.js\nimport { pluginLoader } from '@ima/core';\n\n// We create a placeholder for the plugin loader, so we can change it later\nlet initSettings = () => {};\n\nbeforeAll(() => {\n  pluginLoader.register('mySpec', (...args) => {\n    return {\n      initSettings: (...args) => {\n        return initSettings(...args); // Here we call our overridable function\n      }\n    };\n  });\n});\n\nafterEach(() => {\n  initSettings = () => {}; // Reset the plugin loader so it is not called for other tests\n});\n\ntest('renders component with custom app configuration', async () => {\n  initSettings = () => {\n    return {\n      prod: {\n        customSetting: 'customValue'\n      }\n    }\n  };\n\n  const { getByText } = await renderWithContext(<Component>My Text</Component>);\n  const textElement = getByText(/My Text/i);\n\n  expect(textElement).toBeInTheDocument();\n});\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note, that the plugin loader register method evaluates the second argument right away, but the specific boot config methods are evaluated during ",(0,r.kt)("inlineCode",{parentName:"em"},"renderWithContext")," (or ",(0,r.kt)("inlineCode",{parentName:"em"},"initImaApp")," if you are using it directly).")))}m.isMDXComponent=!0}}]);