"use strict";(self.webpackChunk_ima_docs=self.webpackChunk_ima_docs||[]).push([[4821],{3685:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"tutorial/fetching-data","title":"Fetching Data","description":"Tutorial > Fetching Data","source":"@site/../docs/tutorial/fetching-data.mdx","sourceDirName":"tutorial","slug":"/tutorial/fetching-data","permalink":"/tutorial/fetching-data","draft":false,"unlisted":false,"editUrl":"https://github.com/seznam/ima/tree/master/docs/../docs/tutorial/fetching-data.mdx","tags":[],"version":"current","lastUpdatedBy":"Ji\u0159\xed Fencl","lastUpdatedAt":1743072967000,"frontMatter":{"title":"Fetching Data","description":"Tutorial > Fetching Data"},"sidebar":"tutorial","previous":{"title":"Adding Some State","permalink":"/tutorial/adding-some-state"},"next":{"title":"Writing Posts","permalink":"/tutorial/writing-posts"}}');var r=n(2540),o=n(3023),i=n(3776),a=n(6052);const c={title:"Fetching Data",description:"Tutorial > Fetching Data"},l=void 0,d={},h=[{value:"Mocking REST API",id:"mocking-rest-api",level:2},{value:"Entity Class",id:"entity-class",level:3},{value:"Factory Class",id:"factory-class",level:3},{value:"Resource Class",id:"resource-class",level:3},{value:"Service class",id:"service-class",level:3},{value:"Dependency injection",id:"dependency-injection",level:2},{value:"Object container &amp; <code>bind.js</code>",id:"object-container--bindjs",level:3},{value:"Using PostServices in HomeController",id:"using-postservices-in-homecontroller",level:3},{value:"Server-side rendering",id:"server-side-rendering",level:2}];function u(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["In ",(0,r.jsx)(t.a,{href:"./adding-some-state",children:"last part"})," of this series we tidied up our HomeView component and split our render method\ninto much smaller and manageable components thanks to react. In this part we're going to\nmock the data fetching from server and learn more about IMA.js object container."]}),"\n",(0,r.jsx)(t.h2,{id:"mocking-rest-api",children:"Mocking REST API"}),"\n",(0,r.jsx)(t.p,{children:"We won't go into building a REST API server with an actual database storing the\nguestbook posts - that is beyond this tutorial and IMA.js. To give you the idea\nof fetching data from the server, we'll create a simpler alternative."}),"\n",(0,r.jsxs)(t.p,{children:["We'll start by creating the ",(0,r.jsx)(t.code,{children:"app/assets/static/api"})," directory and the\n",(0,r.jsx)(t.code,{children:"app/assets/static/api/posts.json"})," file with the following content (",(0,r.jsx)(t.strong,{children:"copied from\nour home controller and modified"}),"):"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'[\n  {\n    "id": 4,\n    "content": "Never mistake motion for action.",\n    "author": "Ernest Hemingway"\n  },\n  {\n    "id": 3,\n    "content": "Quality means doing it right when no one is looking.",\n    "author": "Henry Ford"\n  },\n  {\n    "id": 2,\n    "content": "We are what we repeatedly do. Excellence, then, is not an act, but a habit.",\n    "author": "Aristotle"\n  },\n  {\n    "id": 1,\n    "content": "Reality is merely an illusion, albeit a very persistent one.",\n    "author": "Albert Einstein"\n  }\n]\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Notice how we added the ",(0,r.jsx)(t.code,{children:"id"})," field - as mentioned previously, in a real world\napplication, you should rely on the primary keys provided to you by your\nbackend instead of generating them yourself."]}),"\n",(0,r.jsxs)(t.p,{children:["Now that we have our data ready, we just need some way to actually fetch it\nfrom the server. To do that, we'll introduce 4 new classes into our project:\nan ",(0,r.jsx)(t.strong,{children:"entity"})," class, a ",(0,r.jsx)(t.strong,{children:"factory"})," class, a ",(0,r.jsx)(t.strong,{children:"resource"})," class, and a ",(0,r.jsx)(t.strong,{children:"service"})," class."]}),"\n",(0,r.jsx)(t.h3,{id:"entity-class",children:"Entity Class"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"entity class"})," represents a typed data holder for our data (which is useful\nfor debugging) and allows us to add various computed properties without having\nto modify our API backend."]}),"\n",(0,r.jsxs)(t.p,{children:["Let's create the ",(0,r.jsx)(t.code,{children:"app/model"})," and ",(0,r.jsx)(t.code,{children:"app/model/post"})," directories and then a new\nfile ",(0,r.jsx)(t.code,{children:"app/model/post/PostEntity.js"})," (or ",(0,r.jsx)(t.code,{children:".ts"}),") with the following content:"]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(a.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"export default class PostEntity {\n  constructor(data) {\n    this.id = data.id;\n\n    this.content = data.content;\n\n    this.author = data.author;\n  }\n}\n"})})}),(0,r.jsxs)(a.A,{value:"TypeScript",children:[(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { PostData } from 'app/page/home/HomeController';\n\nexport class PostEntity {\n  declare id: number | null;\n  declare content: string;\n  declare author: string;\n\n  constructor(data: PostData) {\n    this.id = data.id;\n    this.content = data.content;\n    this.author = data.author;\n  }\n}\n"})}),(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"TypeScript:"})," Before we set the content of the data object to our fields,\nwe have to declare each field with its corresponding type."]}),"\n"]}),(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:["We also used ",(0,r.jsx)(t.code,{children:"PostData"})," type, that we already defined in the ",(0,r.jsx)(t.code,{children:"HomeController"}),".\nBut keep in mind that there is no ",(0,r.jsx)(t.code,{children:"id"})," attribute, so you have to add it to the type definition."]}),"\n"]})]})]}),"\n",(0,r.jsx)(t.p,{children:"We've just created a new class, exported it, and that's it, no more is currently\nrequired. Our new entity class extracts the data obtained from a data object\n(for example obtained from a deserialized JSON) and sets it to its fields."}),"\n",(0,r.jsx)(t.h3,{id:"factory-class",children:"Factory Class"}),"\n",(0,r.jsxs)(t.p,{children:["So, with our entity class ready, let's take a look at the ",(0,r.jsx)(t.strong,{children:"factory"})," class. ",(0,r.jsx)(t.strong,{children:"The\nfactory class will be used to create new entities from data objects and arrays\nof data objects"})," - but in our case, the latter will suffice for now."]}),"\n",(0,r.jsxs)(t.p,{children:["Create a new ",(0,r.jsx)(t.code,{children:"app/model/post/PostFactory.js"})," (or ",(0,r.jsx)(t.code,{children:".ts"}),") file with the following content:"]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(a.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import PostEntity from './PostEntity';\n\nexport default class PostFactory {\n  static get $dependencies() {\n    return [];\n  }\n\n  createList(entities) {\n    return entities.map(entityData => new PostEntity(entityData));\n  }\n}\n"})})}),(0,r.jsx)(a.A,{value:"TypeScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { PostEntity } from './PostEntity';\nimport { Dependencies } from '@ima/core';\nimport { PostData } from 'app/page/home/HomeController';\n\nexport class PostFactory {\n  static $dependencies: Dependencies = [];\n\n  createList(entities: PostData[]): PostEntity[] {\n    return entities.map((entityData: PostData) => new PostEntity(entityData));\n  }\n}\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:["Our new factory class has just one method named ",(0,r.jsx)(t.code,{children:"createList()"}),". The\nmethod takes an array of data objects and returns an array of post entities."]}),"\n",(0,r.jsx)(t.h3,{id:"resource-class",children:"Resource Class"}),"\n",(0,r.jsxs)(t.p,{children:["We have our entity and factory, now we need a resource class. ",(0,r.jsx)(t.strong,{children:"The resource\nclass represents our single point of access to a single REST API resource"}),"\n(or entity collection, if you will). The sole purpose of a resource class is to\nprovide a relatively low-level API for accessing the REST API resource. Create\na new ",(0,r.jsx)(t.code,{children:"app/model/post/PostResource.js"})," (or ",(0,r.jsx)(t.code,{children:".ts"}),") file with the following contents:"]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(a.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import PostFactory from './PostFactory';\n\nexport default class PostResource {\n  static get $dependencies() {\n    return ['$Http', PostFactory];\n  }\n\n  constructor(http, factory) {\n    this._http = http;\n\n    this._factory = factory;\n  }\n\n  getEntityList() {\n    return this._http\n      .get('http://localhost:3001/static/static/public/api/posts.json', {})\n      .then(response => this._factory.createList(response.body));\n  }\n}\n"})})}),(0,r.jsxs)(a.A,{value:"TypeScript",children:[(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { Dependencies } from '@ima/core';\nimport { PostData } from 'app/page/home/HomeController';\nimport { PostEntity } from 'app/model/post/PostEntity';\nimport { PostFactory } from './PostFactory';\n\ntype PostApiGetResponse = {\n  body: PostData[];\n};\n\nexport class PostResource {\n  static $dependencies: Dependencies = ['$Http', PostFactory];\n\n  declare _http: any;\n  declare _factory: PostFactory;\n\n  constructor(http: any, factory: PostFactory) {\n    this._http = http;\n\n    this._factory = factory;\n  }\n\n  getEntityList(): Promise<PostEntity[]> {\n    return this._http\n      .get('http://localhost:3001/static/static/public/api/posts.json', {})\n      .then((response: PostApiGetResponse) =>\n        this._factory.createList(response.body)\n      );\n  }\n}\n"})}),(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"TypeScript:"})," Right now we are using ",(0,r.jsx)(t.code,{children:"any"})," type for ",(0,r.jsx)(t.code,{children:"_http"})," field.\nAdding correct types here would be too complicated right now.\nMoreover we will fix this in the next part of the tutorial."]}),"\n"]}),(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:["Depending on your IDE, you may see an eslint error on ",(0,r.jsx)(t.code,{children:"getEntityList"})," return statement due to unspecified return type.\nWe will address this in the next part of the tutorial.\nIf you want, you can temporarily disable eslint for this line by adding ",(0,r.jsx)(t.code,{children:"// eslint-disable-next-line"})," comment."]}),"\n"]})]})]}),"\n",(0,r.jsxs)(t.p,{children:["We defined the ",(0,r.jsx)(t.code,{children:"getEntityList()"})," method in our resource class which we'll use\nto fetch the posts from the server. In a real-world application we would use\nconfiguration to set the URL to the resource instead of specifying it like\nthis, but that is beyond the scope of this tutorial."]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"_http.get()"})," method returns a new promise that resolves to the response\nobject of a GET HTTP request sent to the specified URL, with the provided query\nparameters (the second parameter currently set to an empty object). The method\nalso automatically parses the JSON in our response body."]}),"\n",(0,r.jsxs)(t.p,{children:["We then post-process the parsed response data using the Promise's ",(0,r.jsx)(t.code,{children:"then"}),"\ncallback which uses our factory to create an array of post entities."]}),"\n",(0,r.jsxs)(t.p,{children:["You may have noticed that we have the ",(0,r.jsx)(t.code,{children:"http"})," and ",(0,r.jsx)(t.code,{children:"factory"})," parameters in our\nconstructor. This is how we provide the resource with the HTTP agent provided\nby IMA.js, and our post entity factory. We'll take a look at how to do this\nproperly in a moment."]}),"\n",(0,r.jsx)(t.h3,{id:"service-class",children:"Service class"}),"\n",(0,r.jsxs)(t.p,{children:["You now may be wondering what is the point of the service class.\nIt isn't that useful in our tutorial, but it would be essential in a bigger application.\nThe ",(0,r.jsx)(t.strong,{children:"resource should handle only sending requests and\nprocessing responses"})," without any high-level operations. The ",(0,r.jsx)(t.strong,{children:"service class is\nthere to take care of the high-level stuff"}),". For example, should we have a REST\nAPI that provides us with paged access to posts and we would want to fetch all\nposts since a specific one, this would be handled by the service. The service\nwould fetch the necessary pages from the REST API, construct the result and\nresolve to the constructed sequence of post entities."]}),"\n",(0,r.jsxs)(t.p,{children:["In our case, however, the service will be very plain. Create a new\n",(0,r.jsx)(t.code,{children:"app/model/post/PostService.js"})," (or ",(0,r.jsx)(t.code,{children:".ts"}),") file with the following content:"]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(a.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import PostResource from './PostResource';\n\nexport default class PostService {\n  static get $dependencies() {\n    return [PostResource];\n  }\n\n  constructor(resource) {\n    this._resource = resource;\n  }\n\n  getPosts() {\n    return this._resource.getEntityList();\n  }\n}\n"})})}),(0,r.jsx)(a.A,{value:"TypeScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { Dependencies } from '@ima/core';\nimport { PostEntity } from 'app/model/post/PostEntity';\nimport { PostResource } from './PostResource';\n\nexport class PostService {\n  static $dependencies: Dependencies = [PostResource];\n\n  declare _resource: PostResource;\n\n  constructor(resource: PostResource) {\n    this._resource = resource;\n  }\n\n  getPosts(): Promise<PostEntity[]> {\n    return this._resource.getEntityList();\n  }\n}\n"})})})]}),"\n",(0,r.jsx)(t.p,{children:"Now that we have our entity, factory, resource and service, you may be thinking\nthat this is a little too much code for something so simple. Well, that depends\non many things. If you can expect mostly uniform data from your REST API with\nlittle modifications required, you may want to use a reflection-powered\nsolution that requires you only to specify a single configuration item (API\nroot URL) and to create entity classes. The solution shown here is more robust\nand flexible, allowing you to make slight adjustments to suit every resource\nyou are working with as required."}),"\n",(0,r.jsx)(t.h2,{id:"dependency-injection",children:"Dependency injection"}),"\n",(0,r.jsxs)(t.p,{children:["So how do we actually start using our post service? First we need to wire\neverything up, well we actually already did that. You may have noticed that in most of the\nclasses we used some weird static getter called ",(0,r.jsx)(t.code,{children:"$dependencies"}),", that's how IMA.js built\nin dependency injection works."]}),"\n",(0,r.jsxs)(t.p,{children:["IMA.js uses internally the Object Container class to handle all dependencies (you can\n",(0,r.jsx)(t.a,{href:"/basic-features/object-container",children:"read more about it in the documentation"}),"), but the basic usage is fairly easy.\nEvery class that wants to use DI has to define static getter which returns an array of instances\nwe want to inject to the constructor in the same order as defined in the array itself. Real\nworld example would then look something like this:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import HttpClient from 'http';\nimport PostFactory from './PostFactory';\n\nexport default class PostResource {\n  static get $dependencies() {\n    return [HttpClient, PostFactory];\n  }\n\n  constructor(http, factory) {\n    // http and factory contains instances of their respective classes\n    this._http = http;\n    this._factory = factory;\n  }\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The only condition to have DI working as expected is, that if you want to use any class as a dependency,\n",(0,r.jsx)(t.strong,{children:"it has to define static getter"})," ",(0,r.jsx)(t.code,{children:"$dependencies"}),". Even if it does not have any dependencies and returns\nempty array. Otherwise OC will not recognize this as valid class to inject and it won't work."]}),"\n",(0,r.jsxs)(t.h3,{id:"object-container--bindjs",children:["Object container & ",(0,r.jsx)(t.code,{children:"bind.js"})]}),"\n",(0,r.jsxs)(t.p,{children:["Object container offers more functionality than just defining DI in the ",(0,r.jsx)(t.code,{children:"$dependencies"})," method.\nThe ",(0,r.jsx)(t.code,{children:"app/config/bind.js"})," offers full access to our Object container in the ",(0,r.jsx)(t.code,{children:"init"})," method.\nThis allows you to do some pretty amazing stuff. You can create aliases for classes, constants,\ninject dependencies and more."]}),"\n",(0,r.jsx)(t.p,{children:"The object container serves mostly the following purposes -\nconfiguring class constructor dependencies, setting default implementing\nclasses of interfaces, creating aliases for classes, global registry of\nvalues and an instance factory and registry."}),"\n",(0,r.jsxs)(t.p,{children:["Just like an ordinary ",(0,r.jsx)(t.strong,{children:"dependency injector"}),", the Object Container is used to\nspecify the dependencies of our classes, create and retrieve shared instances\nand create new instances on demand."]}),"\n",(0,r.jsx)(t.p,{children:"The object container allows us to:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Specify the dependencies"})," of a class using the ",(0,r.jsx)(t.code,{children:"inject()"})," method or by\noverriding the ",(0,r.jsx)(t.code,{children:"$dependencies()"})," static getter on the class itself (the\ndependencies will be passed in the constructor)."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Create string aliases"})," for our classes using the ",(0,r.jsx)(t.code,{children:"bind()"})," method (like the\n",(0,r.jsx)(t.code,{children:"$Http"})," alias we used to retrieve the HTTP agent provided by IMA.js)."]}),"\n",(0,r.jsxs)(t.li,{children:["Create named ",(0,r.jsx)(t.strong,{children:"object container-global constants"})," using the ",(0,r.jsx)(t.code,{children:"constant()"})," method."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Specify the default implementation"})," of an ",(0,r.jsx)(t.strong,{children:"interface"})," using the ",(0,r.jsx)(t.code,{children:"provide()"}),"\nmethod (this allows us to specify the interface as a dependency and switch\nthe implementation everywhere in our application by changing a single\nconfiguration item)."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"We can only access the object container in this configuration file"}),". After that\nit works behind the scenes, providing dependencies and managing our shared\ninstances as needed. You can find out more about its ",(0,r.jsx)(t.a,{href:"../api/classes/ima_core.Bootstrap.md",children:"API"})," by studying the\n",(0,r.jsx)(t.a,{href:"/basic-features/object-container",children:"documentation"})," or the ",(0,r.jsx)(t.a,{href:"https://github.com/seznam/ima/blob/master/packages/core/src/ObjectContainer.js",children:"source code"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"using-postservices-in-homecontroller",children:"Using PostServices in HomeController"}),"\n",(0,r.jsxs)(t.p,{children:["Let's take another look at the ",(0,r.jsx)(t.code,{children:"$Http"})," alias among the dependencies of our post\nresource - as already mentioned, this is an instance of the HTTP agent (client)\nprovided by the IMA.js. All utilities and services provided by IMA.js are bound\nto the object container via aliases and have their aliases prefixed with ",(0,r.jsx)(t.code,{children:"$"})," to\nprevent accidental name collisions, but most can be used without having to use\naliases as dependency identifiers by specifying the classes and interfaces\nthemselves as dependencies."]}),"\n",(0,r.jsxs)(t.p,{children:["Next we modify the dependencies of the ",(0,r.jsx)(t.code,{children:"app/page/home/HomeController.js"})," by adding the\n",(0,r.jsx)(t.code,{children:"PostService"})," dependency using the static getter syntax. The resulting code looks\nas follows:"]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(a.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import { AbstractController } from '@ima/core';\nimport PostService from 'app/model/post/PostService';\n\nexport default class HomeController extends AbstractController {\n  static get $dependencies() {\n    return [PostService];\n  }\n\n  constructor(postService) {\n    super();\n\n    this._postService = postService;\n  }\n\n  ...\n}\n"})})}),(0,r.jsx)(a.A,{value:"TypeScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import {\n  AbstractController,\n  Dependencies,\n  Dictionary,\n  LoadedResources,\n  MetaManager,\n  Router,\n  Settings,\n} from '@ima/core';\nimport { PostService } from 'app/model/post/PostService';\n\nexport type PostData = {\n  id: number | null;\n  content: string;\n  author: string;\n};\nexport type HomeControllerState = {\n  posts: PostData[];\n};\n\nexport class HomeController extends AbstractController<HomeControllerState> {\n  static $dependencies: Dependencies = [PostService];\n  _postService: PostService;\n\n  constructor(postService: PostService) {\n    super();\n\n    this._postService = postService;\n  }\n\n  ...\n}\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:["This will push an instance of our post service as the first argument to the\nconstructor of our home page controller. With the post service safely in our\n",(0,r.jsx)(t.code,{children:"_postService"})," field, we can use it to fetch the posts from the server in our ",(0,r.jsx)(t.code,{children:"load()"})," method:"]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(a.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"return {\n  posts: this._postService.getPosts(),\n};\n"})})}),(0,r.jsx)(a.A,{value:"TypeScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"return {\n  posts: this._postService.getPosts(),\n};\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:["Finally, we can make use of our new post entities in the home controller's view\n(",(0,r.jsx)(t.code,{children:"app/page/home/HomeView.jsx"}),"). Let's modify the ",(0,r.jsx)(t.code,{children:"_renderPosts()"})," method to look\nlike this:"]}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsx)(a.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",children:"const { posts } = this.props;\n\nreturn posts.map(post => (\n  <Post key={post.id} content={post.content} author={post.author} />\n));\n"})})}),(0,r.jsx)(a.A,{value:"TypeScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"return posts.map((post: PostData) => (\n  <Post key={post.id} content={post.content} author={post.author} />\n));\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:["Notice how we use the ",(0,r.jsx)(t.code,{children:"post.id"})," as the react element key here. Now go ahead,\nrefresh the page and you'll see the posts still there,\nbut this time fetched from the server! Or are they?"]}),"\n",(0,r.jsx)(t.h2,{id:"server-side-rendering",children:"Server-side rendering"}),"\n",(0,r.jsxs)(t.p,{children:["If you open your browsers's developer tools, you may notice that the network log does\nnot show any request to ",(0,r.jsx)(t.code,{children:"http://localhost:3001/static/static/public/api/posts.json"}),"."]}),"\n",(0,r.jsx)(t.p,{children:'You may remember that IMA.js is an isomorphic JavaScript application stack.\nThis means that our application gets rendered at the server first, then it is\nsent to the client with a serialized state information, and then the\napplication is "reanimated" at the client-side using the state information.'}),"\n",(0,r.jsxs)(t.p,{children:["IMA.js caches the requests we make using the HTTP service at the server-side\nand sends the serialized cache to the client. The cache is then deserialized at\nthe client-side, so the request to\n",(0,r.jsx)(t.code,{children:"http://localhost:3001/static/static/public/api/posts.json"})," we do in our post resource will\nbe resolved from the cache, leading to no additional HTTP request being made."]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},6052:(e,t,n)=>{n.d(t,{A:()=>i});n(3696);var s=n(2689);const r={tabItem:"tabItem_wHwb"};var o=n(2540);function i(e){let{children:t,hidden:n,className:i}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,i),hidden:n,children:t})}},3776:(e,t,n)=>{n.d(t,{A:()=>w});var s=n(3696),r=n(2689),o=n(3707),i=n(9519),a=n(3604),c=n(5196),l=n(6229),d=n(8030);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:n,attributes:s,default:r}}=e;return{value:t,label:n,attributes:s,default:r}}))}(n);return function(e){const t=(0,l.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const r=(0,i.W6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c.aZ)(o),(0,s.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=u(e),[i,c]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:o}))),[l,h]=m({queryString:n,groupId:r}),[f,y]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,d.Dv)(n);return[r,(0,s.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),j=(()=>{const e=l??f;return p({value:e,tabValues:o})?e:null})();(0,a.A)((()=>{j&&c(j)}),[j]);return{selectedValue:i,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),y(e)}),[h,y,o]),tabValues:o}}var y=n(5200);const j={tabList:"tabList_J5MA",tabItem:"tabItem_l0OV"};var g=n(2540);function x(e){let{className:t,block:n,selectedValue:s,selectValue:i,tabValues:a}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,o.a_)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),r=a[n].value;r!==s&&(l(t),i(r))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},t),children:a.map((e=>{let{value:t,label:n,attributes:o}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:e=>{c.push(e)},onKeyDown:h,onClick:d,...o,className:(0,r.A)("tabs__item",j.tabItem,o?.className,{"tabs__item--active":s===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:o}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===o));return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==o})))})}function b(e){const t=f(e);return(0,g.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,g.jsx)(x,{...t,...e}),(0,g.jsx)(v,{...t,...e})]})}function w(e){const t=(0,y.A)();return(0,g.jsx)(b,{...e,children:h(e.children)},String(t))}},3023:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(3696);const r={},o=s.createContext(r);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);