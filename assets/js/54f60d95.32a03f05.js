"use strict";(self.webpackChunk_ima_docs=self.webpackChunk_ima_docs||[]).push([[6114],{773:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"basic-features/views-and-components","title":"Views & Components","description":"Basic features > Views & Components","source":"@site/../docs/basic-features/views-and-components.md","sourceDirName":"basic-features","slug":"/basic-features/views-and-components","permalink":"/basic-features/views-and-components","draft":false,"unlisted":false,"editUrl":"https://github.com/seznam/ima/tree/master/docs/../docs/basic-features/views-and-components.md","tags":[],"version":"current","lastUpdatedBy":"Ji\u0159\xed Fencl","lastUpdatedAt":1743072967000,"frontMatter":{"title":"Views & Components","description":"Basic features > Views & Components"},"sidebar":"docs","previous":{"title":"Controller lifecycle","permalink":"/basic-features/controller-lifecycle"},"next":{"title":"Data fetching","permalink":"/basic-features/data-fetching"}}');var i=s(2540),r=s(3023);const o={title:"Views & Components",description:"Basic features > Views & Components"},a=void 0,l={},c=[{value:"Organizing Views and Components",id:"organizing-views-and-components",level:2},{value:"Rendering Views",id:"rendering-views",level:2},{value:"Route parameters in View",id:"route-parameters-in-view",level:3},{value:"Communication between Views and Controllers",id:"communication-between-views-and-controllers",level:2},{value:"Utilities shared across Views and Components",id:"utilities-shared-across-views-and-components",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["As you may have noticed when a ",(0,i.jsx)(n.a,{href:"/basic-features/routing/introduction",children:"route is registered"}),",\na constructor of ",(0,i.jsx)(n.strong,{children:"Controller"})," and ",(0,i.jsx)(n.strong,{children:"View"})," is given as a 3rd and 4th argument.\nController takes care of loading and managing the data while View is a\npresentation for the data loaded by the Controller."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:s(2746).A+"",width:"881",height:"421"})}),"\n",(0,i.jsx)(n.h2,{id:"organizing-views-and-components",children:"Organizing Views and Components"}),"\n",(0,i.jsx)(n.p,{children:"A good spot to place a view file is next to a controller file - that is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"app/page/<name-of-the-page>/\n \u251c\u2500 SomeController.js\n \u251c\u2500 SomeView.jsx\n \u2514\u2500 someView.less\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To structure your views easily you can split your views into a smaller components\nthat can also be reused in other views. Those smaller component are then included\nand used as any other react component. Components should be\nplaced into a ",(0,i.jsx)(n.code,{children:"app/component/"})," directory."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"app/page/component/\n \u251c\u2500 document/\n |   \u2514\u2500 DocumentView.jsx\n \u251c\u2500 header/\n |   \u251c\u2500 Header.jsx\n |   \u2514\u2500 header.less\n \u2514\u2500 searchBar/\n     \u251c\u2500 SearchBar.jsx\n     \u2514\u2500 searchBar.less\n"})}),"\n",(0,i.jsx)(n.h2,{id:"rendering-views",children:"Rendering Views"}),"\n",(0,i.jsx)(n.p,{children:"Views are just a React components that receive page state as props, that means you\ncan freely use internal component state and any React lifecycle methods as you\nwish."}),"\n",(0,i.jsxs)(n.p,{children:["An element that is returned from the ",(0,i.jsx)(n.code,{children:"render"})," method is appended to the\n",(0,i.jsx)(n.code,{children:"ManagedRootView"}),", ",(0,i.jsx)(n.code,{children:"ViewAdapter"})," and then ",(0,i.jsx)(n.code,{children:"DocumentView"})," on the ",(0,i.jsx)(n.strong,{children:"server side"}),"\nand send as a plain HTML markup to the client where it's hydrated with it's\nformer state."]}),"\n",(0,i.jsxs)(n.p,{children:["When a route change occurs on a ",(0,i.jsx)(n.strong,{children:"client side"})," and..."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["...only route parameters has changed, route was registered with the ",(0,i.jsx)(n.code,{children:"onlyUpdate"}),"\nflag set to ",(0,i.jsx)(n.code,{children:"true"})," and Controller has ",(0,i.jsx)(n.code,{children:"update"})," method defined. In this case the\nView receives new props (page state) and should react to them accordingly."]}),"\n",(0,i.jsx)(n.li,{children:"...the current view is different from the new one then the rendered view is\nreplaced with a newly rendered view."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"route-parameters-in-view",children:"Route parameters in View"}),"\n",(0,i.jsxs)(n.p,{children:["In ideal case Views should only display data loaded in Controller and not even\ncare about route parameters. But as nothing is ever ideal we've added ",(0,i.jsxs)(n.a,{href:"/basic-features/routing/introduction#route-params-substitutions",children:[(0,i.jsx)(n.code,{children:"params"})," object"]})," to the View props for you."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"// app/config/routes.js\nrouter.add('user-detail', '/user/:userId', UserController, UserView);\nrouter.add('user-edit', '/user/:userId/edit', UserEditController, UserEditView);\n\n// app/page/user-detail/UserView.jsx\nconst { userId } = this.props.params;\n\nconst userLink = this.link('user-edit', { userId });\n<a href = { userLink }>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This example ensures that the link to ",(0,i.jsx)(n.code,{children:"user-edit"})," page is functional\nimmediately when a user navigates to ",(0,i.jsx)(n.code,{children:"user-detail"})," page. Otherwise the link would\nbe functional only after the user-loading promise has been resolved."]}),"\n",(0,i.jsx)(n.h2,{id:"communication-between-views-and-controllers",children:"Communication between Views and Controllers"}),"\n",(0,i.jsxs)(n.p,{children:["It's clear that data obtained in a Controller are passed down to a View and thus\naffecting how the rendered View looks and what it displays. A problem arises when\na View wants to tell Controller to load or change something. The solution to this\nare event handling utils ",(0,i.jsx)(n.a,{href:"./events#eventbus",children:(0,i.jsx)(n.strong,{children:"EventBus"})})," and\n",(0,i.jsx)(n.a,{href:"./events#dispatcher",children:(0,i.jsx)(n.strong,{children:"Dispatcher"})}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"utilities-shared-across-views-and-components",children:"Utilities shared across Views and Components"}),"\n",(0,i.jsx)(n.p,{children:"At some point you'll come to a situation when it'd be nice to have a function or set of functions shared between multiple components. Great example would be custom link generation, page elements manipulation (modal, lightbox) or adverts and analytics."}),"\n",(0,i.jsxs)(n.p,{children:["These cases are covered by ",(0,i.jsx)(n.strong,{children:"ComponentUtils"})," that allow you to register classes (utilities) that are then shared across every View and Component. Utilities are instantiated through ",(0,i.jsx)(n.a,{href:"./object-container",children:"OC"})," therefore you can get access to other utilities or IMA.js components."]}),"\n",(0,i.jsxs)(n.p,{children:["Example Utility class would look like this. Simple class with ",(0,i.jsx)(n.a,{href:"./object-container#1-dependency-injection",children:"dependency injection"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// app/helper/LightboxHelper.js\nimport { Router } from '@ima/core';\n\nexport default class LightboxHelper {\n  static get $dependencies() {\n    return [Router];\n  }\n\n  showLightbox(content) {\n    ...\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then to register the utility class:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// app/config/bind.js\nimport { ComponentUtils } from '@ima/core';\nimport LightboxHelper from 'app/helper/LightboxHelper';\nimport AnalyticsUtils from 'app/helper/AnalyticsUtils';\n\nexport default (ns, oc, config) => {\n  const ComponentUtils = oc.get(ComponentUtils); // or oc.get('$ComponentUtils');\n\n  ComponentUtils.register('Lightbox', LightboxHelper);\n  // OR to register multiple utilities at once\n  ComponentUtils.register({\n    Lightbox: LightboxHelper,\n    AnalyticsUtils\n  });\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Finally, what'd be the point to register these classes if we were not to use them... All of the utilities are present in ",(0,i.jsx)(n.code,{children:"utils"})," property on ",(0,i.jsx)(n.strong,{children:"AbstractComponent"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// app/component/gallery/Gallery.jsx\nimport { AbstractComponent } from '@ima/react-page-renderer';\n\nexport default class Gallery extends AbstractComponent {\n\n  onPhotoClick(photoId) {\n    const { Lightbox } = this.utils;\n\n    Lightbox.showLightbox(...);\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For some heavy-used utilities we've created a shortcut methods in ",(0,i.jsx)(n.strong,{children:"AbstractComponent"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"link"})}),(0,i.jsx)(n.code,{children:"(name, params)"})," = ",(0,i.jsx)(n.a,{href:"./routing/introduction#linking-between-routes",children:(0,i.jsx)(n.strong,{children:"Router.link()"})})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"localize"})}),(0,i.jsx)(n.code,{children:"(key, params"})," = ",(0,i.jsx)(n.a,{href:"./dictionary",children:(0,i.jsx)(n.strong,{children:"Dictionary.get()"})})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"fire"})}),(0,i.jsx)(n.code,{children:"(eventName, data)"})," = ",(0,i.jsx)(n.a,{href:"./events#eventbus",children:(0,i.jsx)(n.strong,{children:"EventBus.fire()"})})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"listen"})}),(0,i.jsx)(n.code,{children:"(eventTarget, eventName, listener)"})," = ",(0,i.jsx)(n.a,{href:"./events#eventbus",children:(0,i.jsx)(n.strong,{children:"EventBus.listen()"})})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"unlisten"})}),(0,i.jsx)(n.code,{children:"(eventTarget, eventName, listener)"})," = ",(0,i.jsx)(n.a,{href:"./events#eventbus",children:(0,i.jsx)(n.strong,{children:"EventBus.unlisten()"})})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["One special case would be ",(0,i.jsx)(n.code,{children:"cssClasses"})," shortcut which is by default alias for ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/classnames",children:(0,i.jsx)(n.strong,{children:"classnames"})})," package. You can overwrite this behavior by registering you own helper in ComponentUtils under ",(0,i.jsx)(n.code,{children:"$CssClasses"})," alias."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"cssClasses"})}),(0,i.jsx)(n.code,{children:"(classRules, includeComponentClassName"})," = ",(0,i.jsx)(n.code,{children:"this.utils.$CssClasses()"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},2746:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/diagram-view-56a22b0e13633a1269dc52d3e1132aa6.png"},3023:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(3696);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);