"use strict";(self.webpackChunk_ima_docs=self.webpackChunk_ima_docs||[]).push([[7675],{643:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"tutorial/final-polish","title":"Final Polish","description":"Tutorial > Final Polish","source":"@site/../docs/tutorial/final-polish.mdx","sourceDirName":"tutorial","slug":"/tutorial/final-polish","permalink":"/tutorial/final-polish","draft":false,"unlisted":false,"editUrl":"https://github.com/seznam/ima/tree/master/docs/../docs/tutorial/final-polish.mdx","tags":[],"version":"current","lastUpdatedBy":"Ji\u0159\xed Fencl","lastUpdatedAt":1743072967000,"frontMatter":{"title":"Final Polish","description":"Tutorial > Final Polish"},"sidebar":"tutorial","previous":{"title":"Writing Posts","permalink":"/tutorial/writing-posts"}}');var o=n(2540),i=n(3023),a=n(3776),r=n(6052);const l={title:"Final Polish",description:"Tutorial > Final Polish"},c=void 0,d={},h=[{value:"Improving user experience (UX)",id:"improving-user-experience-ux",level:2},{value:"Form validation",id:"form-validation",level:3},{value:"Optimistic posting",id:"optimistic-posting",level:3},{value:"Updating the service classes &amp; home controller",id:"updating-the-service-classes--home-controller",level:4},{value:"Displaying pending posts",id:"displaying-pending-posts",level:4},{value:"Recap",id:"recap",level:4},{value:"Updating view components",id:"updating-view-components",level:3},{value:"Auto-refresh",id:"auto-refresh",level:2},{value:"REST API pooling",id:"rest-api-pooling",level:3},{value:"Random generators",id:"random-generators",level:3},{value:"Random name generator",id:"random-name-generator",level:4},{value:"Random post generator",id:"random-post-generator",level:4},{value:"Updating the <code>MockHttpAgent</code>",id:"updating-the-mockhttpagent",level:4},{value:"Handling race conditions",id:"handling-race-conditions",level:2},{value:"Pending posts race condition",id:"pending-posts-race-condition",level:3},{value:"Posts refresh race condition",id:"posts-refresh-race-condition",level:3},{value:"Updating the <code>PostResource</code>",id:"updating-the-postresource",level:4},{value:"Updating the <code>HomeController</code>",id:"updating-the-homecontroller",level:4},{value:"Animations",id:"animations",level:2},{value:"Retaining original post ID",id:"retaining-original-post-id",level:3},{value:"Animating new posts",id:"animating-new-posts",level:3},{value:"Conclusion",id:"conclusion",level:2}];function p(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["In the ",(0,o.jsx)(t.a,{href:"/tutorial/writing-posts",children:"5th part of the tutorial"})," we updated our application to be able to process\ninput from user, learned something about ways different components can communicate with each other in IMA.js application\nand updated our guestbook API."]}),"\n",(0,o.jsx)(t.p,{children:"In this last part of the tutorial we're going to polish few things up and\nfinally finish our guestbook application."}),"\n",(0,o.jsx)(t.h2,{id:"improving-user-experience-ux",children:"Improving user experience (UX)"}),"\n",(0,o.jsx)(t.p,{children:"We have a working application, but the UX (user experience) is kind-of lacking.\nWe will address this in this section."}),"\n",(0,o.jsx)(t.p,{children:"Let's start by adding validation to the posting form."}),"\n",(0,o.jsx)(t.h3,{id:"form-validation",children:"Form validation"}),"\n",(0,o.jsxs)(t.p,{children:["Start by extending our constructor in the posting form component (",(0,o.jsx)(t.code,{children:"app/component/postingForm/PostingForm.jsx"}),")\nwith 2 new state keys:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"constructor(props, context) {\n  super(props, context);\n  ...\n  this.state = {\n    author: '',\n    content: '',\n    authorValid: true,\n    contentValid: true,\n  };\n}\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"type Post = {\n  author: string;\n  content: string;\n  authorValid: boolean;\n  contentValid: boolean;\n};\n\nconstructor(props, context) {\n  super(props, context);\n  ...\n  this.state = {\n    author: '',\n    content: '',\n    authorValid: true,\n    contentValid: true,\n  };\n}\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["Next we need to update our form elements to visually correspond to the validity of the input\nby updating their CSS classes. To achieve this we're going to use ",(0,o.jsx)(t.code,{children:"is-invalid"})," class which is\ntaken from the Bootstrap CSS library we're using and will apply red shadow to the input if it's invalid:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"<input\n  id='postForm-name'\n  className={this.cssClasses({\n    'form-control': true,\n    'is-invalid': !this.state.authorValid,\n  })}\n  type='text'\n  name='author'\n  value={this.state.author}\n  onChange={e => this._onChange(e)}\n  placeholder='Your name'\n/>\n...\n<textarea\n  id='postForm-content'\n  className={this.cssClasses({\n    'form-control': true,\n    'is-invalid': !this.state.contentValid,\n  })}\n  name='content'\n  value={this.state.content}\n  onChange={e => this._onChange(e)}\n  placeholder='What would you like to tell us?'\n/>\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"<input\n  id='postForm-name'\n  className={this.cssClasses({\n    'form-control': true,\n    'is-invalid': !this.state.authorValid,\n  })}\n  type='text'\n  name='author'\n  value={this.state.author}\n  onChange={e => this._onChange(e)}\n  placeholder='Your name'\n/>\n...\n<textarea\n  id='postForm-content'\n  className={this.cssClasses({\n    'form-control': true,\n    'is-invalid': !this.state.contentValid,\n  })}\n  name='content'\n  value={this.state.content}\n  onChange={e => this._onChange(e)}\n  placeholder='What would you like to tell us?'\n/>\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsxs)(t.strong,{children:["The expression in the ",(0,o.jsx)(t.code,{children:"className"})," attribute will set the CSS class"]})," ",(0,o.jsx)(t.code,{children:"is-invalid"}),"\non the form element depending on the current state of the ",(0,o.jsx)(t.code,{children:"authorValid"})," or\n",(0,o.jsx)(t.code,{children:"contentValid"})," flag, while any changes made by the user will trigger the\nvalidation we'll add to our existing ",(0,o.jsx)(t.code,{children:"_onChange"})," method."]}),"\n",(0,o.jsx)(t.p,{children:"For the sake of this tutorial, we're simply going to check if the inputs are empty or not.\nBut in a serious application, you should probably implement more sophisticated validation method."}),"\n",(0,o.jsxs)(t.p,{children:["We're going to validate each input in the ",(0,o.jsx)(t.code,{children:"_onChange"})," handler while also checking the validation\nin the ",(0,o.jsx)(t.code,{children:"_onSubmit"})," method, to cover a case, where user doesn't change any input and submits the form\nimmediately. This would result in false validation, since the initial state for our validation keys is ",(0,o.jsx)(t.code,{children:"true"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["First we're going to implement our validation method, which checks if given input is valid and sets\nthe result of validation to corresponding state key while also returning the result of validation, which\nwe'll use later in ",(0,o.jsx)(t.code,{children:"_onSubmit"})," method:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"_validate(inputName, value) {\n  const validStateKey = `${inputName}Valid`;\n  const isValid = !!value;\n\n  if (this.state[validStateKey] !== isValid) {\n    this.setState({\n      [validStateKey]: isValid,\n    });\n  }\n\n  return isValid;\n}\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"_validate(inputName: string, value: string) {\n  const validStateKey = `${inputName}Valid`;\n  const isValid = !!value;\n\n  if (this.state[validStateKey as keyof Post] !== isValid) {\n    this.setState({\n      [validStateKey]: isValid,\n    } as Omit<Post, 'author' | 'content'>);\n  }\n\n  return isValid;\n}\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["Through the use of ",(0,o.jsx)(t.strong,{children:"ES2015 dynamic properties"}),", we're able to handle validation for\nboth inputs in one method."]}),"\n",(0,o.jsxs)(t.p,{children:["Now that we have our validation method, we can hook it up to the ",(0,o.jsx)(t.code,{children:"_onChange"})," handler.\nThe updated handler with the validation will look like this:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"_onChange({ target: { name, value } }) {\n  this._validate(name, value);\n  this.setState({\n    [name]: value,\n  });\n}\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"  _onChange({\n    target: { name, value },\n  }: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\n    this._validate(name, value);\n    this.setState({\n      [name]: value,\n    } as Pick<Post, 'author' | 'content'>);\n  }\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["Finally, we need to prevent the user from submitting the form if any of the\ninputs are invalid. To do that, update the ",(0,o.jsx)(t.code,{children:"onSubmit(event)"})," method's content:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"_onSubmit(event) {\n  event.preventDefault();\n\n  // Validate on submit to also cover the initial submission\n  const { author, content } = this.state;\n  if (\n    !this._validate('author', author) ||\n    !this._validate('content', content)\n  ) {\n    return;\n  }\n\n  this.fire(this.#containerRef.current, 'postSubmitted', {\n    author: this.state.author,\n    content: this.state.content,\n  });\n\n  // Reset the state after submitting\n  this.setState({\n    author: '',\n    content: '',\n  });\n}\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"_onSubmit(event: FormEvent<HTMLFormElement>) {\n  event.preventDefault();\n\n  // Validate on submit to also cover the initial submission\n  const { author, content } = this.state;\n  if (\n    !this._validate('author', author) ||\n    !this._validate('content', content)\n    ) {\n    return;\n  }\n\n  this.fire(this.#containerRef.current!, 'postSubmitted', {\n    author: this.state.author,\n    content: this.state.content,\n  });\n\n  // Reset the state after submitting\n  this.setState({\n    author: '',\n    content: '',\n  });\n}\n"})})})]}),"\n",(0,o.jsx)(t.p,{children:"With this, the form validation is complete. Feel free to check this in your own application\nand you should see red input fields if the inputs are empty, while the submit button should prevent\nyou from submitting an empty content."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:n(1391).A+"",width:"1200",height:"460"})}),"\n",(0,o.jsx)(t.p,{children:"So now let's make the posting experience a little bit better."}),"\n",(0,o.jsx)(t.h3,{id:"optimistic-posting",children:"Optimistic posting"}),"\n",(0,o.jsxs)(t.p,{children:["To better illustrate the issue we're addressing, open the HTTP agent mock\nclass (",(0,o.jsx)(t.code,{children:"app/mock/MockHttpAgent.js"}),") and set the ",(0,o.jsx)(t.code,{children:"POST_DELAY"})," to ",(0,o.jsx)(t.code,{children:"4500"}),". This\nwill introduce a 4.5 second delay before the submitted post is created in the\nguest book. The delay simulates a client connecting through a narrow bandwidth\nor using a mobile connection with a bad signal. Try adding a new post now and\nyou'll see how infuriating this can be."]}),"\n",(0,o.jsx)(t.p,{children:"We can improve the overall UX using a mechanism called optimistic posting. This\nmeans that we will display the user's post before the server confirms that it\nhas been saved. To further improve the UX, we will mark the post as pending in\nthe UI, so that the user will be aware that the post has not yet been saved."}),"\n",(0,o.jsx)(t.h4,{id:"updating-the-service-classes--home-controller",children:"Updating the service classes & home controller"}),"\n",(0,o.jsxs)(t.p,{children:["We'll start by adding an extra field to our ",(0,o.jsx)(t.strong,{children:"post entity"}),"\n(",(0,o.jsx)(t.code,{children:"app/model/post/PostEntity.js"}),") by adding the following line(s) to the\n",(0,o.jsx)(t.strong,{children:"constructor"}),":"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"this.isSaved = data.isSaved;\n"})})}),(0,o.jsxs)(r.A,{value:"TypeScript",children:[(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"export class PostEntity {\n  ...\n  declare isSaved: boolean;\n\n  constructor(data: PostData) {\n    ...\n    this.isSaved = data.isSaved;\n  }\n}\n"})}),(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"TypeScript:"})," In Typescript also change the ",(0,o.jsx)(t.code,{children:"PostData"})," type in ",(0,o.jsx)(t.code,{children:"app/page/home/HomeController"})," to:"]}),"\n"]}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"export type PostData = {\n  id: number | null;\n  content: string;\n  author: string;\n  isSaved: boolean;\n};\n"})})]})]}),"\n",(0,o.jsxs)(t.p,{children:["We will use the ",(0,o.jsx)(t.code,{children:"isSaved"})," flag to determine whether the post has been saved at\nthe server or not."]}),"\n",(0,o.jsxs)(t.p,{children:["Next we need to update the ",(0,o.jsx)(t.code,{children:"getEntityList()"})," method in the ",(0,o.jsx)(t.strong,{children:"post resource"})," class\n(",(0,o.jsx)(t.code,{children:"app/model/post/PostResource.js"}),"):"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"return this._http\n  .get('http://localhost:3001/static/static/public/api/posts.json', {})\n  .then(response => {\n    response.body.forEach(post => (post.isSaved = true));\n    return response.body;\n  })\n  .then(postsData => this._factory.createList(postsData));\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"getEntityList(): Promise<PostEntity[]> {\n  return this._http\n    .get('http://localhost:3001/static/static/public/api/posts.json', {})\n    .then((response: PostApiGetResponse) => {\n      response.body.forEach(post => (post.isSaved = true));\n      return response.body;\n    })\n    .then((postsData: PostData[]) => this._factory.createList(postsData));\n}\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["This modification sets the ",(0,o.jsx)(t.code,{children:"isSaved"})," flag on posts retrieved from the server,\nmarking them as saved."]}),"\n",(0,o.jsxs)(t.p,{children:["Next we need to update our ",(0,o.jsx)(t.strong,{children:"home page controller"}),"\n(",(0,o.jsx)(t.code,{children:"app/page/home/HomeController.js"}),") by modifying the body of the ",(0,o.jsx)(t.code,{children:"load()"}),"\nmethod to the following snippet:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"return {\n  posts: this._postService.getPosts(),\n  pendingPosts: [],\n};\n"})})}),(0,o.jsxs)(r.A,{value:"TypeScript",children:[(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"export type HomeControllerState = {\n  posts: PostData[];\n  pendingPosts: PostData[];\n};\n\nexport class HomeController extends AbstractController<HomeControllerState> {\n  ...\n\n  load(): HomeControllerState {\n    return {\n      posts: this._postService.getPosts(),\n      pendingPosts: [],\n    };\n  }\n}\n"})}),(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"TypeScript:"})," Do not forget to update the ",(0,o.jsx)(t.code,{children:"HomeControllerState"})," type."]}),"\n"]})]})]}),"\n",(0,o.jsxs)(t.p,{children:["We added the ",(0,o.jsx)(t.code,{children:"pendingPosts"})," field to our state, which we'll use to keep track\nof the posts that are being submitted to the server. We'll need the ",(0,o.jsx)(t.strong,{children:"post\nfactory"})," in ",(0,o.jsx)(t.strong,{children:"our home controller"})," to create the entities representing the pending\nposts, so let's modify controller's the constructor by adding a new parameter\nand a field for the post factory:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"constructor(postService, postFactory) {\n  super();\n\n  this._postService = postService;\n  this._postFactory = postFactory;\n}\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"constructor(postService: PostService, postFactory: PostFactory) {\n  super();\n\n  this._postService = postService;\n  this._postFactory = postFactory;\n}\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["And, of course, we need to update the ",(0,o.jsx)(t.code,{children:"$dependencies"})," list so OC can inject\nPostFactory instance to our constructor as a second argument. so modify the dependencies of the ",(0,o.jsx)(t.strong,{children:"home\npage controller"})," (",(0,o.jsx)(t.code,{children:"app/page/home/HomeController.js"}),") to the following:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"import PostFactory from 'app/model/post/PostFactory';\n...\nstatic get $dependencies() {\n  return [PostService, PostFactory];\n}\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import { PostFactory } from 'app/model/post/PostFactory';\n\nexport class HomeController extends AbstractController<HomeControllerState> {\n  static $dependencies: Dependencies = [PostService, PostFactory];\n\n  ...\n}\n"})})})]}),"\n",(0,o.jsx)(t.h4,{id:"displaying-pending-posts",children:"Displaying pending posts"}),"\n",(0,o.jsxs)(t.p,{children:['Now we need to display both the pending posts and saved posts. To do that,\nwe need to "patch" our controller\'s state to in the ',(0,o.jsx)(t.code,{children:"onPostSubmitted()"})," event\nlistener after submitting the new post to update our UI:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"const pendingPost = this._postFactory.createEntity(\n  Object.assign(\n    {\n      id: null,\n      isSaved: false,\n    },\n    eventData\n  )\n);\n\nlet state = this.getState();\nlet pendingPosts = state.pendingPosts.slice();\npendingPosts.unshift(pendingPost);\n\nthis.setState({\n  pendingPosts,\n});\n\nthis._postService\n  .createPost(eventData)\n  .then(savedPost => {\n    // update the state in place\n    pendingPost.isSaved = true;\n    pendingPost.id = savedPost.id;\n\n    // update the UI\n    let state = this.getState();\n    this.setState({\n      pendingPosts: state.pendingPosts,\n    });\n\n    return this._postService.getPosts();\n  })\n  .then(posts => {\n    let state = this.getState();\n\n    this.setState({\n      posts: posts,\n      pendingPosts: state.pendingPosts.filter(post => post !== pendingPost),\n    });\n  });\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"onPostSubmitted(eventData: PostData) {\n  const pendingPost: PostData = this._postFactory.createEntity(\n    Object.assign(\n      {\n        id: null,\n        isSaved: false,\n      },\n      eventData\n    )\n  );\n\n  const state = this.getState();\n  const pendingPosts = state.pendingPosts.slice();\n  pendingPosts.unshift(pendingPost);\n\n  this.setState({\n    pendingPosts,\n  });\n\n  this._postService\n    .createPost(eventData)\n    .then((savedPost: PostData) => {\n      // update the state in place\n      pendingPost.isSaved = true;\n      pendingPost.id = savedPost.id;\n\n      // update the UI\n      const state = this.getState();\n      this.setState({\n        pendingPosts: state.pendingPosts,\n      });\n\n      return this._postService.getPosts();\n    })\n    .then((posts: PostData[]) => {\n      const state = this.getState();\n\n      this.setState({\n        posts: posts,\n        pendingPosts: state.pendingPosts.filter(post => post !== pendingPost),\n      });\n    });\n}\n"})})})]}),"\n",(0,o.jsx)(t.p,{children:"Woa, that's a lot of code! Don't worry, we'll break it down."}),"\n",(0,o.jsx)(t.h4,{id:"recap",children:"Recap"}),"\n",(0,o.jsxs)(t.p,{children:["First we create a new post entity from our form data augmented with the ",(0,o.jsx)(t.code,{children:"id"}),"\nand ",(0,o.jsx)(t.code,{children:"isSaved"})," fields to represent our pending post. Next we fetch the current\nstate and patch the ",(0,o.jsx)(t.code,{children:"pendingPosts"})," field to our state by prepending the pending\npost (we want our newest post to be displayed at the top of the list)."]}),"\n",(0,o.jsxs)(t.p,{children:["Next we ask the post service to create the post and when the post is created,\nwe mark the pending post as saved, set its ID, patch the ",(0,o.jsx)(t.code,{children:"pendingPosts"})," field\nin the state and refresh the posts list from the server."]}),"\n",(0,o.jsxs)(t.p,{children:["Once the updated list of posts is retrieved from the server, we remove the\npending post from the ",(0,o.jsx)(t.code,{children:"pendingPosts"})," array (since it is saved at the server\nnow, it is among the posts fetched from the server) and update the state."]}),"\n",(0,o.jsx)(t.h3,{id:"updating-view-components",children:"Updating view components"}),"\n",(0,o.jsxs)(t.p,{children:["Now that our state contains both the pending and saved posts, we can move to\nthe view. Open the controller's view (",(0,o.jsx)(t.code,{children:"app/page/home/HomeView.jsx"}),") and update\nthe ",(0,o.jsx)(t.code,{children:"_renderPosts()"})," method:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"const allPosts = this.props.pendingPosts.concat(this.props.posts);\n\nreturn allPosts.map(post => (\n  <Post\n    key={post.id}\n    content={post.content}\n    author={post.author}\n    isSaved={post.isSaved}\n  />\n));\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"type HomeViewProps = {\n  posts: PostData[];\n  pendingPosts: PostData[];\n};\n\nexport class HomeView extends AbstractComponent<HomeViewProps> {\n  ...\n  _renderPosts() {\n    const allPosts = pendingPosts.concat(posts);\n\n    return allPosts.map((post: PostData) => (\n      <Post\n        key={post.id}\n        content={post.content}\n        author={post.author}\n        isSaved={post.isSaved}\n      />\n    ));\n  }\n}\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["We concatenate the pending posts and saved posts into a single ",(0,o.jsx)(t.code,{children:"allPosts"}),"\narray and then render it using our ",(0,o.jsx)(t.code,{children:"Post"})," component. Notice that we added the\n",(0,o.jsx)(t.code,{children:"isSaved"})," attribute - we'll use that in a moment."]}),"\n",(0,o.jsxs)(t.p,{children:["So let's turn our attention to the post component\n(",(0,o.jsx)(t.code,{children:"app/component/post/Post.jsx"}),"). Update the ",(0,o.jsx)(t.code,{children:"render()"})," method to the following\nsnippet:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"const { content, author, isSaved } = this.props;\n\nreturn (\n  <div\n    className={this.cssClasses({\n      post: true,\n      card: true,\n      'card-default': true,\n      'post-pending': !isSaved,\n    })}\n    >\n    <div className='card-body'>{content}</div>\n    <div className='post-author card-footer'>{author}</div>\n  </div>\n);\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"type PostProps = {\n  content: string;\n  author: string;\n  isSaved: boolean;\n};\n\nexport class Post extends AbstractComponent<PostProps> {\n  render() {\n    const { content, author, isSaved } = this.props;\n\n    return (\n      <div\n        className={this.cssClasses({\n        post: true,\n        card: true,\n        'card-default': true,\n        'post-pending': !isSaved,\n      })}\n      >\n      <div className='card-body'>{content}</div>\n      <div className='post-author card-footer'>{author}</div>\n    </div>\n    );\n  }\n}\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["Nothing really new here, we're just adding the ",(0,o.jsx)(t.code,{children:"post-pending"})," CSS class on our\npost's root element if the post is not saved yet."]}),"\n",(0,o.jsxs)(t.p,{children:["Open the post's style file (",(0,o.jsx)(t.code,{children:"app/component/post/post.less"}),") and add the\nfollowing content:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scss",children:".post-pending .card-body {\n  background: #e9e9e9;\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Try adding new posts"})," - you'll see them highlighted until they are saved.\nHowever, should you try to quickly add several posts, you may notice a weird\nbehavior - there is only a single pending post shown, the last one. This is\ncaused by the fact that all our pending posts have their IDs set to ",(0,o.jsx)(t.code,{children:"null"}),", so\nReact considers them to be the same post (",(0,o.jsx)(t.a,{href:"./fetching-data#using-postservices-in-homecontroller",children:"remember how we use the post ID to identify the post in the DOM?"}),")."]}),"\n",(0,o.jsxs)(t.p,{children:["To fix that we introduce a new field to our home page controller\n(",(0,o.jsx)(t.code,{children:"app/page/home/HomeController.js"}),") in the constructor:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"this._lastPendingPostId = 0;\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"this._lastPendingPostId = 0;\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["...and use it in the ",(0,o.jsx)(t.code,{children:"onPostSubmitted()"})," method by replacing the\n",(0,o.jsx)(t.code,{children:"let pendingPost = ..."})," with the following:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"let pendingPost = this._postFactory.createEntity(\n  Object.assign(\n    {\n      id: `pending-${this._lastPendingPostId++}`,\n      isSaved: false,\n    },\n    eventData\n  )\n);\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"const pendingPost: PostData = this._postFactory.createEntity(\n  Object.assign(\n    {\n      id: `pending-${this._lastPendingPostId++}`,\n      isSaved: false,\n    },\n    eventData\n  )\n);\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["This will ensure that all our pending posts will have unique IDs, which will be\nalso prefixed with ",(0,o.jsx)(t.code,{children:"pending-"})," to prevent possible collisions with the IDs\ngenerated by our backend."]}),"\n",(0,o.jsx)(t.h2,{id:"auto-refresh",children:"Auto-refresh"}),"\n",(0,o.jsx)(t.p,{children:"Our guest book sure does look better, but we have to actually refresh the page\n(or write a new post) to see whether someone else did not post a new post. So\nlet's take care of that."}),"\n",(0,o.jsxs)(t.p,{children:["In our case we'll use ",(0,o.jsx)(t.strong,{children:"polling of our REST API"}),". You may want to use a\n",(0,o.jsx)(t.a,{href:"http://www.w3.org/TR/websockets/",children:"WebSocket"})," or\n",(0,o.jsx)(t.a,{href:"http://www.w3.org/TR/eventsource/",children:"Server-sent events"})," in a real-world\napplication to enable real-time updates. Using either of these technologies\nwould require us to write an actual backend for our application, which is\nbeyond the scope of this tutorial."]}),"\n",(0,o.jsx)(t.h3,{id:"rest-api-pooling",children:"REST API pooling"}),"\n",(0,o.jsxs)(t.p,{children:["So, to start, add a new field in the home page controller's\n(",(0,o.jsx)(t.code,{children:"app/page/home/HomeController.js"}),") constructor which will hold information\nabout an interval we'll use to pool our API:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"this._refreshIntervalId = null;\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"declare _refreshIntervalId:\n  | ReturnType<typeof setTimeout>\n  | number\n  | null\n  | undefined;\n\nconstructor(postService: PostService, postFactory: PostFactory) {\n  super();\n\n  ...\n\n  this._refreshIntervalId = null;\n}\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["Next add the following configuration constant below the ",(0,o.jsx)(t.code,{children:"import ..."}),"\ndeclaration at the beginning of the file:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"const REFRESH_DELAY = 2000; // milliseconds\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"const REFRESH_DELAY = 2000; // milliseconds\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["To initialize our refresh cycle, we'll use one of the ",(0,o.jsx)(t.strong,{children:"lifecycle methods"})," that\neach IMA.js Controller has, an ",(0,o.jsx)(t.code,{children:"activate()"})," method. To learn more about the\nlifecycle of Controller and it's methods,\n",(0,o.jsx)(t.a,{href:"/basic-features/controller-lifecycle",children:"take a look at the documentation"}),". In our case\nthe activate method will look like this:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"activate() {\n  this._refreshIntervalId = setInterval(() => this._refresh(), REFRESH_DELAY);\n}\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"activate(): void {\n  this._refreshIntervalId = setInterval(() => this._refresh(), REFRESH_DELAY);\n}\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["To clear a pending refresh timeout, we'll use the ",(0,o.jsx)(t.code,{children:"deactivate()"})," method:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"deactivate() {\n  if (this._refreshIntervalId) {\n    clearInterval(this._refreshIntervalId);\n  }\n}\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"deactivate(): void {\n  if (this._refreshIntervalId) {\n    clearInterval(this._refreshIntervalId);\n  }\n}\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["And, finally, we can implement our ",(0,o.jsx)(t.code,{children:"_refresh()"})," method:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"_refresh() {\n  this._postService.getPosts().then(posts => {\n    this.setState({ posts });\n  });\n}\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"_refresh(): void {\n  this._postService.getPosts().then((posts: PostData[]) => {\n    this.setState({ posts });\n  });\n}\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["You won't see it because our HTTP communication is only mocked, but the posts\nare now being refreshed every 2 seconds. But since we ",(0,o.jsx)(t.strong,{children:"do"})," want to see\nsomething happening, let's build a random post generator real quick."]}),"\n",(0,o.jsx)(t.h3,{id:"random-generators",children:"Random generators"}),"\n",(0,o.jsxs)(t.p,{children:["To build our random post generator we'll create several new files. Start by\ncreating the ",(0,o.jsx)(t.code,{children:"app/mock/TextGenerator.js"})," file with the following contents:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"const WORDS = [\n  'lorem', 'ipsum', 'dolor', 'sit', 'amet', 'consectetur', 'adipiscing',\n  'elit', 'ut', 'aliquam', 'purus', 'amet', 'luctus', 'venenatis', 'lectus',\n  'magna', 'fringilla', 'urna', 'porttitor', 'rhoncus', 'non', 'enim',\n  'praesent', 'elementum', 'facilisis', 'leo', 'vel', 'est', 'ullamcorper',\n  'eget', 'nulla', 'facilisi', 'etiam', 'dignissim', 'diam', 'quis',\n  'lobortis', 'scelerisque', 'fermentum', 'dui', 'faucibus', 'in', 'ornare',\n  'quam', 'viverra', 'orci', 'sagittis', 'eu', 'volutpat', 'odio', 'mauris',\n  'massa', 'vitae', 'tortor', 'condimentum', 'lacinia', 'eros', 'donec', 'ac',\n  'tempor', 'dapibus', 'ultrices', 'iaculis', 'nunc', 'sed', 'augue', 'lacus',\n  'congue', 'eu', 'consequat', 'felis', 'et', 'pellentesque', 'commodo',\n  'egestas', 'phasellus', 'eleifend', 'pretium', 'vulputate', 'sapien', 'nec',\n  'aliquam', 'malesuada', 'bibendum', 'arcu', 'curabitur', 'velit', 'sodales',\n  'sem', 'integer', 'justo', 'vestibulum', 'risus', 'ultricies', 'tristique',\n  'aliquet', 'tortor', 'at', 'auctor', 'urna', 'id', 'cursus', 'metus', 'mi',\n  'posuere', 'sollicitudin', 'orci', 'a', 'semper', 'duis', 'tellus', 'mattis',\n  'nibh', 'proin', 'nisl', 'venenatis', 'a', 'habitant', 'morbi', 'senectus',\n  'netus', 'fames', 'turpis', 'tempus', 'pharetra', 'pharetra', 'mi',\n  'hendrerit', 'gravida', 'blandit', 'hac', 'habitasse', 'platea', 'dictumst',\n  'quisque', 'sagittis', 'consequat', 'nisi', 'suscipit', 'maecenas', 'cras',\n  'aenean', 'placerat', 'vestibulum', 'eros', 'tincidunt', 'erat', 'imperdiet',\n  'euismod', 'nisi', 'porta', 'mollis', 'leo', 'nisl', 'ipsum', 'nec',\n  'nullam', 'feugiat', 'fusce', 'suspendisse', 'potenti', 'vivamus', 'dictum',\n  'varius', 'sapien', 'molestie', 'ac', 'massa', 'accumsan', 'vitae', 'arcu',\n  'vel', 'dolor', 'enim', 'neque', 'convallis', 'neque', 'tempus', 'nam',\n  'pulvinar', 'laoreet', 'interdum', 'libero', 'est', 'tempor', 'elementum',\n  'nunc', 'risus', 'cum', 'sociis', 'natoque', 'penatibus', 'magnis', 'dis',\n  'parturient', 'montes', 'nascetur', 'ridiculus', 'mus', 'accumsan', 'lacus',\n  'volutpat', 'dui', 'ligula', 'libero', 'justo', 'diam', 'rhoncus', 'felis',\n  'et', 'mauris', 'ante', 'metus', 'commodo', 'velit', 'non', 'tellus',\n  'purus', 'rutrum', 'fermentum', 'pretium', 'elit', 'vehicula'\n];\n\nexport default class TextGenerator {\n  static get $dependencies() {\n    return [];\n  }\n\n  generateSentence(\n    minWords = 3,\n    maxWords = 12,\n    minSubSentences = 1,\n    maxSubSentences = 4\n  ) {\n    const subSentencesCount = this._random(minSubSentences, maxSubSentences);\n    const subSentences = [];\n\n    for (let i = 0; i < subSentencesCount; i++) {\n      const wordCount = this._random(minWords, maxWords);\n      const words = [];\n\n      for (let j = 0; j < wordCount; j++) {\n        words.push(WORDS[this._random(0, WORDS.length - 1)]);\n      }\n\n      subSentences.push(words.join(' '));\n    }\n\n    const rawSentence = subSentences.join(', ') + '.';\n    return rawSentence.substring(0, 1).toUpperCase() + rawSentence.substring(1);\n  }\n\n  generateParagraph(minSentences = 1, maxSentences = 5) {\n    const sentenceCount = this._random(minSentences, maxSentences);\n    const sentences = [];\n\n    for (let i = 0; i < sentenceCount; i++) {\n      sentences.push(this.generateSentence());\n    }\n\n    return sentences.join(' ');\n  }\n\n  _random(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["This is a very simple ",(0,o.jsx)(t.a,{href:"http://en.wikipedia.org/wiki/Lorem_ipsum",children:"lorem ipsum"}),"\ngenerator - generator of ",(0,o.jsx)(t.strong,{children:"random text"})," that is used as a filler that behaves like\nan ordinary text. For example when a webpage layout is being tested."]}),"\n",(0,o.jsx)(t.h4,{id:"random-name-generator",children:"Random name generator"}),"\n",(0,o.jsxs)(t.p,{children:["Next we need a ",(0,o.jsx)(t.strong,{children:"name generator"}),", so create the ",(0,o.jsx)(t.code,{children:"app/mock/NameGenerator.js"})," file\nwith the following content:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"const CHAINS = [\n  'ay', 'ho', 'ri', 'tus', 'ga', 'ni', 'of', 'me', 'ar', 'gorn', 'vas', 'si'\n];\n\nexport default class NameGenerator {\n  static get $dependencies() {\n    return [];\n  }\n\n  generateName() {\n    const chainCount = this._random(2, 5);\n    const parts = [];\n\n    for (let i = 0; i < chainCount; i++) {\n      parts.push(CHAINS[this._random(0, CHAINS.length - 1)]);\n    }\n\n    return parts.join('');\n  }\n\n  _random(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n}\n"})}),"\n",(0,o.jsx)(t.p,{children:"This script generates random names using short chains of letters the\nscript combines together."}),"\n",(0,o.jsx)(t.h4,{id:"random-post-generator",children:"Random post generator"}),"\n",(0,o.jsxs)(t.p,{children:["To combine it all up and create the post generator which uses our previously created name and text generators,\nwhich we'll inject as dependencies, to create a post. create the ",(0,o.jsx)(t.code,{children:"app/mock/PostGenerator.js"})," file with the\nfollowing content:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"import TextGenerator from 'app/mock/TextGenerator';\nimport NameGenerator from 'app/mock/NameGenerator';\n\nexport default class PostGenerator {\n  static get $dependencies() {\n    return [TextGenerator, NameGenerator];\n  }\n\n  constructor(textGenerator, nameGenerator) {\n    this._textGenerator = textGenerator;\n    this._nameGenerator = nameGenerator;\n  }\n\n  generatePost() {\n    return {\n      author: this._nameGenerator.generateName(),\n      content: this._textGenerator.generateParagraph(),\n    };\n  }\n}\n"})}),"\n",(0,o.jsx)(t.p,{children:"This script uses our text and name generators to generate post data similar to\nthe data we obtain from our posting form."}),"\n",(0,o.jsxs)(t.h4,{id:"updating-the-mockhttpagent",children:["Updating the ",(0,o.jsx)(t.code,{children:"MockHttpAgent"})]}),"\n",(0,o.jsxs)(t.p,{children:["Now we just need to integrate the post generator with our mock Http to simulate\nother users writing new posts to our guestbook. Open our Http mock\n(",(0,o.jsx)(t.code,{children:"app/mock/MockHttpAgent.js"}),") and add the following constants after the ",(0,o.jsx)(t.code,{children:"POST_DELAY"}),"\nconstant:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"const AUTO_POST_DELAY_MIN = 1500; // milliseconds\nconst AUTO_POST_DELAY_MAX = 6500; // milliseconds\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Next we need to update the constructor along with it's ",(0,o.jsx)(t.code,{children:"$dependencies"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"import PostGenerator from 'app/mock/PostGenerator';\n...\n\nstatic get $dependencies() {\n  return [\n    '$HttpAgentProxy',\n    '$Cache',\n    '$CookieStorage',\n    '$Settings.$Http',\n    '$Window',\n    PostGenerator,\n  ];\n}\n\nconstructor(proxy, cache, cookie, config, window, postGenerator) {\n  super(proxy, cache, cookie, config);\n\n  this._postGenerator = postGenerator;\n\n  this._posts = null;\n\n  if (window.isClient()) {\n    setTimeout(\n      this._generateRandomPost.bind(this),\n      this._random(AUTO_POST_DELAY_MIN, AUTO_POST_DELAY_MAX)\n    );\n  }\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Here we use the window utility provided by IMA.js ",(0,o.jsx)(t.strong,{children:"to determine whether the code\nis being executed at the client or the server side"}),", as we want our posts to be\ngenerated only at the client side."]}),"\n",(0,o.jsx)(t.p,{children:"Now we need to integrate our new post generator logic:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"_generateRandomPost() {\n  this.post('', this._postGenerator.generatePost()).then(() => {\n    setTimeout(\n      this._generateRandomPost.bind(this),\n      this._random(AUTO_POST_DELAY_MIN, AUTO_POST_DELAY_MAX)\n    );\n  });\n}\n\n_random(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n"})}),"\n",(0,o.jsx)(t.p,{children:"With our application logic ready, only thing that needs to be done now is\nto refresh your browser and you should see see a new post being added every few seconds\nwith a random delay. What a lively discussion!"}),"\n",(0,o.jsx)(t.h2,{id:"handling-race-conditions",children:"Handling race conditions"}),"\n",(0,o.jsxs)(t.p,{children:["Looking back at the previous sub-chapter, we introduced a\n",(0,o.jsx)(t.a,{href:"http://en.wikipedia.org/wiki/Race_condition",children:"race condition"})," into our\napplication. We are currently fetching our posts both periodically and when a\nnew post is submitted. The problem is that there is no guarantee in which order\nthe server responses would arrive since the computer network may cause various\ndelays. This could lead to us showing the user a newer version of posts list,\nthen switching to an older version which may not contain the latest post, and\nthen switching to the new version with the next refresh. This problem could be\neven more obvious if we used real-time updates using WebSockets or Server-sent\nevents."]}),"\n",(0,o.jsx)(t.p,{children:"One way to handle this is not to fetch the posts after the user submits a new\npost, but this would reduce the UX in our implementation, so this is not the\nway we want to go."}),"\n",(0,o.jsx)(t.p,{children:"Also, the fact that we display a post as saved before we reload the posts list\nmay result in the post being displayed at the wrong position in the posts list.\nSo let's start with this issue first."}),"\n",(0,o.jsx)(t.h3,{id:"pending-posts-race-condition",children:"Pending posts race condition"}),"\n",(0,o.jsxs)(t.p,{children:["Open the home page controller (",(0,o.jsx)(t.code,{children:"app/page/home/HomeController.js"}),") and update\nthe ",(0,o.jsx)(t.code,{children:"onPostSubmitted()"})," method by replacing the\n",(0,o.jsx)(t.code,{children:"this._postService.createPost(eventData)..."})," expression with the following\ncode:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"this._postService\n  .createPost(eventData)\n  .then(() => this._postService.getPosts())\n  .then(posts => {\n    let state = this.getState();\n\n    this.setState({\n      posts: posts,\n      pendingPosts: state.pendingPosts.filter(post => post !== pendingPost),\n    });\n  });\n"})})}),(0,o.jsxs)(r.A,{value:"TypeScript",children:[(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"export type PostsApiData = {\n  generated: number;\n  posts: PostData[];\n};\nexport type HomeControllerState = {\n  posts: PostsApiData;\n  pendingPosts: PostData[];\n};\n\n...\n\nonPostSubmitted(eventData: PostData) {\n  ...\n  this._postService\n    .createPost(eventData)\n    .then(() => this._postService.getPosts())\n    .then((posts: PostsApiData) => {\n      const state = this.getState();\n\n      if (posts.generated < state.posts.generated) {\n        posts = state.posts;\n      }\n\n      this.setState({\n        posts: posts,\n        pendingPosts: state.pendingPosts.filter(post => post !== pendingPost),\n      });\n    });\n}\n"})}),(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"TypeScript:"})," As you can see, we have to completely refactor our types to match our input data.\nThis is how it might look like in an actual app."]}),"\n"]})]})]}),"\n",(0,o.jsx)(t.p,{children:"What we did here is that we removed the logic that updated the state (and, as a\nresult, the UI) when the post is saved. Now the state (and UI) is updated only\nwhen we fetch the posts from the server (or the HTTP agent mock in our case)."}),"\n",(0,o.jsx)(t.p,{children:"With this issue taken care of, let's resolve the posts refresh race condition."}),"\n",(0,o.jsx)(t.h3,{id:"posts-refresh-race-condition",children:"Posts refresh race condition"}),"\n",(0,o.jsxs)(t.p,{children:["To fix our refresh race condition, we'll envelope the server responses and add a timestamp at which\nthe response has been generated. Open the ",(0,o.jsx)(t.code,{children:"app/public/posts.json"}),"\nfile and update its contents as follows:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-json",children:'{\n  "generated": 1420070400000,\n  "posts": [\n    {\n      "id": 4,\n      "content": "Never mistake motion for action.",\n      "author": "Ernest Hemingway"\n    },\n    {\n      "id": 3,\n      "content": "Quality means doing it right when no one is looking.",\n      "author": "Henry Ford"\n    },\n    {\n      "id": 2,\n      "content": "We are what we repeatedly do. Excellence, then, is not an act, but a habit.",\n      "author": "Aristotle"\n    },\n    {\n      "id": 1,\n      "content": "Reality is merely an illusion, albeit a very persistent one.",\n      "author": "Albert Einstein"\n    }\n  ]\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["We wrapped the array posts into an object and added the ",(0,o.jsx)(t.code,{children:"generated"})," field set\nto the UNIX timestamp (with millisecond precision) of the moment the response\nwas generated by the server."]}),"\n",(0,o.jsxs)(t.p,{children:["Now we need to update the ",(0,o.jsx)(t.code,{children:"get()"})," method of our ",(0,o.jsx)(t.strong,{children:"Http mock"}),"\n(",(0,o.jsx)(t.code,{children:"app/mock/MockHttpAgent.js"}),"):"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"if (!this._posts) {\n  return super.get(url, data, options).then(response => {\n    this._posts = response.body.posts;\n\n    return {\n      body: {\n        generated: Date.now(),\n        posts: this._posts.map(post => Object.assign({}, post)),\n      },\n    };\n  });\n}\n\nreturn new Promise(resolve => {\n  setTimeout(() => {\n    resolve({\n      body: {\n        generated: Date.now(),\n        posts: this._posts.map(post => Object.assign({}, post)),\n      },\n    });\n  }, GET_DELAY);\n});\n"})}),"\n",(0,o.jsxs)(t.p,{children:["These are just minor updates - we get the posts array from the ",(0,o.jsx)(t.code,{children:"posts"})," field in\nthe server response and generate an object with the ",(0,o.jsx)(t.code,{children:"posts"})," and ",(0,o.jsx)(t.code,{children:"generated"}),"\nfields as a response instead of just a plain array of data objects."]}),"\n",(0,o.jsxs)(t.h4,{id:"updating-the-postresource",children:["Updating the ",(0,o.jsx)(t.code,{children:"PostResource"})]}),"\n",(0,o.jsxs)(t.p,{children:["Next update the ",(0,o.jsx)(t.code,{children:"getEntityList()"})," method of the post resource\n(",(0,o.jsx)(t.code,{children:"app/model/post/PostResource.js"}),"):"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"return this._http\n  .get('http://localhost:3001/static/static/public/api/posts.json', {})\n  .then(response => {\n    response.body.posts.forEach(post => (post.isSaved = true));\n\n    return {\n      posts: this._factory.createList(response.body.posts),\n      generated: response.body.generated,\n    };\n  });\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import { PostData, PostsApiData } from 'app/page/home/HomeController';\n\n...\n\ntype PostApiGetResponse = {\n  body: PostsApiData;\n};\n\n...\n\ngetEntityList(): Promise<PostsApiData> {\n  return this._http\n    .get('http://localhost:3001/static/static/public/api/posts.json', {})\n    .then((response: PostApiGetResponse) => {\n      response.body.posts.forEach((post: PostData) => (post.isSaved = true));\n\n      return {\n        posts: this._factory.createList(response.body.posts),\n        generated: response.body.generated,\n      };\n    });\n}\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:['What we do here is that we "unpack" the server response and set the ',(0,o.jsx)(t.code,{children:"generated"}),"\ntimestamp on the posts array directly (note that a custom entity representing\nthe posts list and the ",(0,o.jsx)(t.code,{children:"generated"})," timestamp would be better, but this will do\nfor the purpose of demonstration)."]}),"\n",(0,o.jsxs)(t.h4,{id:"updating-the-homecontroller",children:["Updating the ",(0,o.jsx)(t.code,{children:"HomeController"})]}),"\n",(0,o.jsxs)(t.p,{children:["Finally, we just need to check in our home page controller\n",(0,o.jsx)(t.code,{children:"app/page/home/HomeController.js"})," whether the posts list we just received is not\nstale. Update the ",(0,o.jsx)(t.code,{children:"_refresh()"})," method:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"this._postService.getPosts().then(posts => {\n  const state = this.getState();\n  if (posts.generated < state.posts.generated) {\n    return;\n  }\n\n  this.setState({ posts });\n});\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"this._postService.getPosts().then((posts: PostsApiData) => {\n  const state = this.getState();\n  if (posts.generated < state.posts.generated) {\n    return;\n  }\n\n  this.setState({ posts });\n});\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["...update the body of the last ",(0,o.jsx)(t.code,{children:"then"})," callback in the ",(0,o.jsx)(t.code,{children:"onPostSubmitted()"}),"\nmethod:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"const state = this.getState();\n\nif (posts.generated < state.posts.generated) {\n  posts = state.posts;\n}\n\nthis.setState({\n  posts: posts,\n  pendingPosts: state.pendingPosts.filter(post => post !== pendingPost)\n});\n"})})}),(0,o.jsxs)(r.A,{value:"TypeScript",children:[(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:".then((posts: PostsApiData) => {\n  const state = this.getState();\n\n  if (posts.generated < state.posts.generated) {\n    posts = state.posts;\n  }\n\n  this.setState({\n    posts: posts,\n    pendingPosts: state.pendingPosts.filter(post => post !== pendingPost),\n  });\n});\n"})}),(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"TypeScript:"})," Note that in TypeScript we have to also change return type\nfor method ",(0,o.jsx)(t.code,{children:"getPosts"})," in ",(0,o.jsx)(t.code,{children:"app/model/post/PostService.ts"})," to ",(0,o.jsx)(t.code,{children:"Promise<PostsApiData>"}),"..."]}),"\n"]}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"getPosts(): Promise<PostsApiData> {\n  return this._resource.getEntityList();\n}\n"})})]})]}),"\n",(0,o.jsxs)(t.p,{children:["...and slightly adjust the rendering of the posts in ",(0,o.jsx)(t.code,{children:"app/page/home/HomeView"}),":"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"_renderPosts() {\n  const allPosts = this.props.pendingPosts.concat(this.props.posts.posts);\n\n  ...\n}\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"_renderPosts() {\n  const allPosts = this.props.pendingPosts.concat(this.props.posts.posts);\n\n  ...\n}\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["We added simple checks that ",(0,o.jsx)(t.strong,{children:"compares"})," the ",(0,o.jsx)(t.code,{children:"generated"})," timestamps of the received\nposts with our current posts, and ",(0,o.jsx)(t.strong,{children:"discards"})," the received posts if they are\nstale."]}),"\n",(0,o.jsx)(t.h2,{id:"animations",children:"Animations"}),"\n",(0,o.jsxs)(t.p,{children:["We can further improve the UX using animations. Modify the\n",(0,o.jsx)(t.code,{children:"app/component/post/post.less"})," file by adding the following declaration at the\nend of the file:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scss",children:".post .card-body {\n  transition: 0.3s background;\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["This adds a soft transition of the post's background color. Or does it? The\ntransition does not seem to work, because we change the ID (remember the ",(0,o.jsx)(t.code,{children:"key"}),"\nattribute we set to ",(0,o.jsx)(t.code,{children:"post.id"})," in ",(0,o.jsx)(t.code,{children:"app/page/home/HomeView.jsx"}),"?) of the post in\nthe DOM once we receive it from the server. Because of this the React\nconsiders it to be a different post and removes the old one while adding a new\none to the DOM instead of modifying the original post DOM, so no transition\ntakes place."]}),"\n",(0,o.jsx)(t.h3,{id:"retaining-original-post-id",children:"Retaining original post ID"}),"\n",(0,o.jsxs)(t.p,{children:["What we need is for the post to retain the ID we provided it with even after we\nreceive the response from the server. Fortunately, we can fix this easily in\nour home page controller (",(0,o.jsx)(t.code,{children:"app/page/home/HomeController.js"}),")."]}),"\n",(0,o.jsxs)(t.p,{children:["Rename the ",(0,o.jsx)(t.code,{children:"_lastPendingPostId"})," field declared in the constructor to\n",(0,o.jsx)(t.code,{children:"_lastLocalPostId"})," as it better suits our new use. After that, create the\n",(0,o.jsx)(t.code,{children:"_localPostIds"})," in the constructor:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"this._localPostIds = new Map();\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"this._localPostIds = new Map();\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["Next update the ",(0,o.jsx)(t.code,{children:"onPostSubmitted()"})," method:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"const pendingPost = this._postFactory.createEntity(\n  Object.assign(\n    {\n      id: `local-${this._lastLocalPostId++}`,\n      isSaved: false\n    },\n    eventData\n  )\n);\n\nconst state = this.getState();\nconst pendingPosts = state.pendingPosts.slice();\npendingPosts.unshift(pendingPost);\nthis.setState({\n  pendingPosts\n});\n\nthis._postService\n  .createPost(eventData)\n  .then(createdPost => {\n    this._localPostIds.set(createdPost.id, pendingPost.id);\n    return this._postService.getPosts();\n  })\n  .then(posts => {\n    const state = this.getState();\n\n    if (posts.generated < state.posts.generated) {\n      posts = state.posts;\n    }\n\n    posts.posts.forEach(post => {\n      if (this._localPostIds.has(post.id)) {\n        post.id = this._localPostIds.get(post.id);\n      }\n    });\n\n    this.setState({\n      posts: posts,\n      pendingPosts: state.pendingPosts.filter(post => post !== pendingPost)\n    });\n  });\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"const pendingPost: PostData = this._postFactory.createEntity(\n  Object.assign(\n    {\n      id: `local-${this._lastLocalPostId++}`,\n      isSaved: false,\n    },\n    eventData\n  )\n);\n\nconst state = this.getState();\nconst pendingPosts = state.pendingPosts.slice();\npendingPosts.unshift(pendingPost);\nthis.setState({\n  pendingPosts,\n});\n\nthis._postService\n  .createPost(eventData)\n  .then((createdPost: PostData) => {\n    this._localPostIds.set(createdPost.id, pendingPost.id);\n    return this._postService.getPosts();\n  })\n  .then((posts: PostsApiData) => {\n    const state = this.getState();\n\n    if (posts.generated < state.posts.generated) {\n      posts = state.posts;\n    }\n\n    posts.posts.forEach(post => {\n      if (this._localPostIds.has(post.id)) {\n        post.id = this._localPostIds.get(post.id);\n      }\n    });\n\n    this.setState({\n      posts: posts,\n      pendingPosts: state.pendingPosts.filter(post => post !== pendingPost),\n    });\n  });\n"})})})]}),"\n",(0,o.jsxs)(t.p,{children:["Finally, update the ",(0,o.jsx)(t.code,{children:"_refresh()"})," method:"]}),"\n",(0,o.jsxs)(a.A,{children:[(0,o.jsx)(r.A,{value:"JavaScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"this._postService.getPosts().then(posts => {\n  let state = this.getState();\n  if (posts.generated < state.posts.generated) {\n    return;\n  }\n\n  posts.posts.forEach(post => {\n    if (this._localPostIds.has(post.id)) {\n      post.id = this._localPostIds.get(post.id);\n    }\n  });\n\n  this.setState({ posts });\n});\n"})})}),(0,o.jsx)(r.A,{value:"TypeScript",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"this._postService.getPosts().then((posts: PostsApiData) => {\n  const state = this.getState();\n  if (posts.generated < state.posts.generated) {\n    return;\n  }\n\n  posts.posts.forEach(post => {\n    if (this._localPostIds.has(post.id)) {\n      post.id = this._localPostIds.get(post.id);\n    }\n  });\n\n  this.setState({ posts });\n});\n"})})})]}),"\n",(0,o.jsx)(t.p,{children:"The posts created by the user viewing the page will now maintain their IDs and\nsee a soft transition of the post's background once the post is saved at the\nbackend."}),"\n",(0,o.jsx)(t.h3,{id:"animating-new-posts",children:"Animating new posts"}),"\n",(0,o.jsxs)(t.p,{children:["Let's add some animation to the newly added posts as well. Add the following\nsnippet of code to the end of the ",(0,o.jsx)(t.code,{children:"app/component/post/post.less"})," file:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scss",children:".post {\n  overflow: hidden;\n  animation: new-post 0.3s;\n}\n\n@keyframes new-post {\n  from {\n    max-height: 0;\n    opacity: 0;\n  }\n\n  to {\n    max-height: 5em;\n    opacity: 1;\n  }\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["To put some final touches on the posts we'll add a ",(0,o.jsx)(t.strong,{children:"progress indicator"})," to the\npending posts. Add the following snippet to the post component's view\n(",(0,o.jsx)(t.code,{children:"app/component/post/Post"}),") at the end of the\n",(0,o.jsx)(t.code,{children:"<div className='post-author card-footer'>"})," element's content:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-xml",children:'<div className="spinner">\n  <div className="bounce1" />\n  <div className="bounce2" />\n  <div className="bounce3" />\n</div>\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Then add the following declaration to the post component's\n",(0,o.jsx)(t.code,{children:"app/component/post/post.less"})," file to the ",(0,o.jsx)(t.code,{children:".post-author"})," rule:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scss",children:"position: relative;\n"})}),"\n",(0,o.jsxs)(t.p,{children:["After that add the following snippet into the ",(0,o.jsx)(t.code,{children:".post-author"})," rule (code snippet\nobtained from ",(0,o.jsx)(t.a,{href:"https://tobiasahlin.com/spinkit/",children:"https://tobiasahlin.com/spinkit/"})," and subsequently modified):"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scss",children:".spinner {\n  position: absolute;\n  top: 1em;\n  width: 70px;\n  text-align: center;\n  opacity: 0;\n  transition: 0.3s opacity;\n\n  & > div {\n    width: 16px;\n    height: 16px;\n    background-color: #333;\n    margin-right: 4px;\n\n    border-radius: 100%;\n    display: inline-block;\n    animation: bouncedelay 1.4s infinite ease-in-out;\n    animation-fill-mode: both;\n  }\n\n  .bounce1 {\n    animation-delay: -0.32s;\n  }\n\n  .bounce2 {\n    animation-delay: -0.16s;\n  }\n\n  @keyframes bouncedelay {\n    0%, 80%, 100% {\n      transform: scale(0.0);\n    }\n    40% {\n      transform: scale(1.0);\n    }\n  }\n}\n"})}),"\n",(0,o.jsx)(t.p,{children:"And finally add the following snippet at the end of the file:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scss",children:".post-pending .post-author .spinner {\n  opacity: 1;\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Try writing new posts!"})," The pending posts will have a progress indicator in the\nlower left corner. If you followed the tutorial from start,\nthe final application should look something like the picture below."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:n(3377).A+"",width:"2402",height:"2602"})}),"\n",(0,o.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(t.p,{children:"If all went well, you are currently in front of a finished application. I hope\nyou liked the journey and are happy with what you've learned here."}),"\n",(0,o.jsxs)(t.p,{children:["From now I suggest to take a look at our ",(0,o.jsx)(t.a,{href:"/introduction/getting-started",children:"documentation"})," which goes into greater\ndetail in describing each component of IMA.js development stack or take a direct look at the ",(0,o.jsx)(t.a,{href:"../api/@ima/core/classes/Bootstrap",children:"API"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["If you see any improvements that could be made to this tutorial, or have found\nany mistakes, please let us know by ",(0,o.jsx)(t.a,{href:"https://github.com/seznam/ima/issues",children:"creating issue"})," in our IMA.js monorepo,\nor even better, ",(0,o.jsx)(t.a,{href:"https://github.com/seznam/ima/pulls",children:"creating PR"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"I bid you farewell!"})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},6052:(e,t,n)=>{n.d(t,{A:()=>a});n(3696);var s=n(2689);const o={tabItem:"tabItem_wHwb"};var i=n(2540);function a(e){let{children:t,hidden:n,className:a}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.A)(o.tabItem,a),hidden:n,children:t})}},3776:(e,t,n)=>{n.d(t,{A:()=>b});var s=n(3696),o=n(2689),i=n(3707),a=n(9519),r=n(3604),l=n(5196),c=n(6229),d=n(8030);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:n,attributes:s,default:o}}=e;return{value:t,label:n,attributes:s,default:o}}))}(n);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function u(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const o=(0,a.W6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(i),(0,s.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(o.location.search);t.set(i,e),o.replace({...o.location,search:t.toString()})}),[i,o])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,i=p(e),[a,l]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:i}))),[c,h]=g({queryString:n,groupId:o}),[m,x]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,i]=(0,d.Dv)(n);return[o,(0,s.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:o}),j=(()=>{const e=c??m;return u({value:e,tabValues:i})?e:null})();(0,r.A)((()=>{j&&l(j)}),[j]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!u({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),x(e)}),[h,x,i]),tabValues:i}}var x=n(5200);const j={tabList:"tabList_J5MA",tabItem:"tabItem_l0OV"};var v=n(2540);function f(e){let{className:t,block:n,selectedValue:s,selectValue:a,tabValues:r}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.a_)(),d=e=>{const t=e.currentTarget,n=l.indexOf(t),o=r[n].value;o!==s&&(c(t),a(o))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t),children:r.map((e=>{let{value:t,label:n,attributes:i}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:e=>{l.push(e)},onKeyDown:h,onClick:d,...i,className:(0,o.A)("tabs__item",j.tabItem,i?.className,{"tabs__item--active":s===t}),children:n??t},t)}))})}function w(e){let{lazy:t,children:n,selectedValue:i}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:a.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==i})))})}function y(e){const t=m(e);return(0,v.jsxs)("div",{className:(0,o.A)("tabs-container",j.tabList),children:[(0,v.jsx)(f,{...t,...e}),(0,v.jsx)(w,{...t,...e})]})}function b(e){const t=(0,x.A)();return(0,v.jsx)(y,{...e,children:h(e.children)},String(t))}},3377:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/final-polish-final-7fcff16ad2f0e9bbddcf55d5328d2229.png"},1391:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/final-polish-form-validation-4ddb6e4d8dc0402299cfb6500a98948e.png"},3023:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var s=n(3696);const o={},i=s.createContext(o);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);