"use strict";(self.webpackChunk_ima_docs=self.webpackChunk_ima_docs||[]).push([[103],{6536:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"basic-features/testing","title":"Testing","description":"Basic features > Testing","source":"@site/../docs/basic-features/testing.md","sourceDirName":"basic-features","slug":"/basic-features/testing","permalink":"/basic-features/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/seznam/ima/tree/master/docs/../docs/basic-features/testing.md","tags":[],"version":"current","lastUpdatedBy":"Jan \u0160ime\u010dek","lastUpdatedAt":1761308686000,"frontMatter":{"title":"Testing","description":"Basic features > Testing"},"sidebar":"docs","previous":{"title":"TypeScript","permalink":"/basic-features/typescript"},"next":{"title":"Dynamic imports","permalink":"/advanced-features/dynamic-imports"}}');var r=n(2540),o=n(3023);const s={title:"Testing",description:"Basic features > Testing"},a=void 0,c={},l=[{value:"API",id:"api",level:2},{value:"renderWithContext",id:"renderwithcontext",level:3},{value:"getContextValue",id:"getcontextvalue",level:3},{value:"initImaApp",id:"initimaapp",level:3},{value:"renderHookWithContext",id:"renderhookwithcontext",level:3},{value:"Extending IMA boot config methods",id:"extending-ima-boot-config-methods",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"@ima/testing-library"})," contains utilities for testing IMA.js applications. It provides integration with ",(0,r.jsx)(t.a,{href:"https://jestjs.io",children:"Jest"}),", ",(0,r.jsx)(t.a,{href:"https://testing-library.com/docs/react-testing-library/intro",children:"React Testing Library"})," and ",(0,r.jsx)(t.a,{href:"https://testing-library.com/docs/ecosystem-jest-dom",children:"Testing Library Jest DOM"}),". If you initialized your project via ",(0,r.jsx)(t.code,{children:"create-ima-app"}),", the testing setup is already included in your project. If not, check ",(0,r.jsx)(t.code,{children:"@ima/testing-library"})," README for more information about how to setup testing in your project."]}),"\n",(0,r.jsx)(t.h2,{id:"api",children:"API"}),"\n",(0,r.jsxs)(t.p,{children:["IMA Testing Library is re-exporting everything from ",(0,r.jsx)(t.code,{children:"@testing-library/react"}),". You should always import React Testing Library functions from ",(0,r.jsx)(t.code,{children:"@ima/testing-library"})," as we might add some additional functionality / wrappers in the future. As such, it provides the same API as ",(0,r.jsx)(t.code,{children:"@testing-library/react"})," with some additional features."]}),"\n",(0,r.jsx)(t.h3,{id:"renderwithcontext",children:"renderWithContext"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"async function renderWithContext(\n  ui: ReactElement,\n  options?: RenderOptions & { contextValue?: ContextValue; app?: ImaApp }\n): Promise<ReturnType<typeof render> & { app: ImaApp | null; contextValue: ContextValue; }>\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"renderWithContext"})," is a wrapper around ",(0,r.jsxs)(t.a,{href:"https://testing-library.com/docs/react-testing-library/api#render",children:[(0,r.jsx)(t.code,{children:"render"})," from ",(0,r.jsx)(t.code,{children:"@testing-library/react"})]}),". It sets ",(0,r.jsx)(t.code,{children:"wrapper"})," option in ",(0,r.jsx)(t.code,{children:"render"})," method to a real IMA.js context wrapper. It can take additional optional IMA specific options:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"contextValue"})," - the result of ",(0,r.jsx)(t.code,{children:"getContextValue"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"app"})," - the result of ",(0,r.jsx)(t.code,{children:"initImaApp"})," (if you provide ",(0,r.jsx)(t.code,{children:"contextValue"}),", it does not make any sense to provide ",(0,r.jsx)(t.code,{children:"app"})," as the ",(0,r.jsx)(t.code,{children:"app"})," is only used to generate the ",(0,r.jsx)(t.code,{children:"contextValue"}),")"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"If any of the options is not provided, it will be generated automatically."}),"\n",(0,r.jsx)(t.p,{children:"Example usage:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import { useLocalize } from '@ima/react-page-renderer';\nimport { renderWithContext } from '@ima/testing-library';\n\nfunction Component({ children }) {\n  const localize = useLocalize(); // Get localize function from IMA.js context\n\n  return <div>{localize('my.translation.key')} {children}</div>;\n}\n\ntest('renders component with localized string', async () => {\n  const { getByText } = await renderWithContext(<Component>My Text</Component>);\n  const textElement = getByText(/My Text/i);\n\n  expect(textElement).toBeInTheDocument();\n});\n"})}),"\n",(0,r.jsxs)(t.p,{children:["If you had used ",(0,r.jsx)(t.code,{children:"render"})," from ",(0,r.jsx)(t.code,{children:"@testing-library/react"})," directly, the test would have failed because the ",(0,r.jsx)(t.code,{children:"useLocalize"})," hook would be missing the context. The ",(0,r.jsx)(t.code,{children:"renderWithContext"})," function provides the necessary context and making it easier to test components that depend on the IMA.js context."]}),"\n",(0,r.jsx)(t.h3,{id:"getcontextvalue",children:"getContextValue"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"async function getContextValue(app?: ImaApp): Promise<ContextValue>\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"getContextValue"})," is a helper function that returns the context value from the IMA.js app. It can take an optional ",(0,r.jsx)(t.code,{children:"app"})," parameter, which is the result of ",(0,r.jsx)(t.code,{children:"initImaApp"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"Example usage:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"test('renders component with custom context value', async () => {\n  const contextValue = await getContextValue(); // Generate default context value\n\n  contextValue.$Utils.$Foo = jest.fn(() => 'bar'); // Mock some part of the context\n\n  const { getByText } = await renderWithContext(<Component>My Text</Component>, {\n    contextValue, // Provide the custom context value\n  });\n  const textElement = getByText(/My Text/i);\n\n  expect(textElement).toBeInTheDocument();\n});\n"})}),"\n",(0,r.jsx)(t.h3,{id:"initimaapp",children:"initImaApp"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"async function initImaApp(): Promise<ImaApp>\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"initImaApp"})," is a helper function that initializes the IMA.js app."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"test('renders component with custom app configuration', async () => {\n  const app = await initImaApp(); // Initialize the app\n\n  app.oc.get('$Utils').$Foo = jest.fn(() => 'bar'); // Mock some part of the app\n\n  const { getByText } = await renderWithContext(<Component>My Text</Component>, {\n    app, // Provide the custom app\n  });\n  const textElement = getByText(/My Text/i);\n\n  expect(textElement).toBeInTheDocument();\n});\n"})}),"\n",(0,r.jsx)(t.h3,{id:"renderhookwithcontext",children:"renderHookWithContext"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"async function renderHookWithContext<TResult, TProps>(\n  hook: (props: TProps) => TResult,\n  options?: { contextValue?: ContextValue; app?: ImaApp }\n): Promise<ReturnType<typeof renderHook<TResult, TProps>> & { app: ImaApp | null; contextValue: ContextValue; }>\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"renderHookWithContext"})," is a wrapper around ",(0,r.jsxs)(t.a,{href:"https://testing-library.com/docs/react-testing-library/api#renderhook",children:[(0,r.jsx)(t.code,{children:"renderHook"})," from ",(0,r.jsx)(t.code,{children:"@testing-library/react"})]}),". It uses the same logic as ",(0,r.jsx)(t.code,{children:"renderWithContext"})," to provide the IMA.js context. See ",(0,r.jsxs)(t.a,{href:"#renderwithcontext",children:["the ",(0,r.jsx)(t.code,{children:"renderWithContext"})," section"]})," for more information."]}),"\n",(0,r.jsx)(t.h2,{id:"extending-ima-boot-config-methods",children:"Extending IMA boot config methods"}),"\n",(0,r.jsxs)(t.p,{children:["You can extend IMA boot config by using ",(0,r.jsxs)(t.a,{href:"https://imajs.io/api/classes/ima_core.PluginLoader/#register",children:["IMA ",(0,r.jsx)(t.code,{children:"pluginLoader.register"})]})," method. Use the same approach as in IMA plugins."]}),"\n",(0,r.jsx)(t.p,{children:"You can either register a plugin loader for all tests by setting it up in a setup file."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"// jestSetup.js\nimport { pluginLoader } from '@ima/core';\n\n// If you don't care, if this plugin loader is registered first, or last\npluginLoader.register('jestSetup.js', () => {\n  return {\n    initSettings: () => {\n      return {\n        prod: {\n          customSetting: 'customValue'\n        }\n      }\n    }\n  };\n});\n\n// If you need to register the plugin loader after all other plugin loaders\nbeforeAll(() => {\n  pluginLoader.register('jestSetup.js', () => {\n    return {\n      initSettings: () => {\n        return {\n          prod: {\n            customSetting: 'customValue'\n          }\n        }\n      }\n    };\n  });\n});\n\n// jest.config.js\nmodule.exports = {\n  // Add this line to your jest config\n  setupFilesAfterEnv: ['./jestSetup.js']\n};\n"})}),"\n",(0,r.jsx)(t.p,{children:"Or you can register a plugin loader for a specific test file."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"// mySpec.js\nimport { pluginLoader } from '@ima/core';\n\nbeforeAll(() => {\n  pluginLoader.register('mySpec', () => {\n    return {\n      initSettings: () => {\n        return {\n          prod: {\n            customSetting: 'customValue'\n          }\n        }\n      }\n    };\n  });\n});\n\ntest('renders component with custom app configuration', async () => {\n  const { getByText } = await renderWithContext(<Component>My Text</Component>);\n  const textElement = getByText(/My Text/i);\n\n  expect(textElement).toBeInTheDocument();\n});\n"})}),"\n",(0,r.jsx)(t.p,{children:"Or you can register a plugin loader for a test file, but make the boot config methods dynamic so you can change them for each test."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"// mySpec.js\nimport { pluginLoader } from '@ima/core';\n\n// We create a placeholder for the plugin loader, so we can change it later\nlet initSettings = () => {};\n\nbeforeAll(() => {\n  pluginLoader.register('mySpec', (...args) => {\n    return {\n      initSettings: (...args) => {\n        return initSettings(...args); // Here we call our overridable function\n      }\n    };\n  });\n});\n\nafterEach(() => {\n  initSettings = () => {}; // Reset the plugin loader so it is not called for other tests\n});\n\ntest('renders component with custom app configuration', async () => {\n  initSettings = () => {\n    return {\n      prod: {\n        customSetting: 'customValue'\n      }\n    }\n  };\n\n  const { getByText } = await renderWithContext(<Component>My Text</Component>);\n  const textElement = getByText(/My Text/i);\n\n  expect(textElement).toBeInTheDocument();\n});\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsxs)(t.em,{children:["Note, that the plugin loader register method evaluates the second argument right away, but the specific boot config methods are evaluated during ",(0,r.jsx)(t.code,{children:"renderWithContext"})," (or ",(0,r.jsx)(t.code,{children:"initImaApp"})," if you are using it directly)."]})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},3023:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var i=n(3696);const r={},o=i.createContext(r);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);