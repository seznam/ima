"use strict";(self.webpackChunk_ima_docs=self.webpackChunk_ima_docs||[]).push([[1412],{9069:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"basic-features/rendering-process","title":"Rendering process","description":"Basic features > Rendering process","source":"@site/../docs/basic-features/rendering-process.md","sourceDirName":"basic-features","slug":"/basic-features/rendering-process","permalink":"/basic-features/rendering-process","draft":false,"unlisted":false,"editUrl":"https://github.com/seznam/ima/tree/master/docs/../docs/basic-features/rendering-process.md","tags":[],"version":"current","lastUpdatedBy":"Ji\u0159\xed Fencl","lastUpdatedAt":1743072967000,"frontMatter":{"title":"Rendering process","description":"Basic features > Rendering process"},"sidebar":"docs","previous":{"title":"Object Container","permalink":"/basic-features/object-container"},"next":{"title":"Handling scripts and styles","permalink":"/basic-features/handling-scripts-and-styles"}}');var r=t(2540),i=t(3023);const o={title:"Rendering process",description:"Basic features > Rendering process"},a=void 0,c={},d=[{value:"DocumentView",id:"documentview",level:2},{value:"ViewAdapter",id:"viewadapter",level:2},{value:"React Context",id:"react-context",level:3},{value:"ManagedRootView",id:"managedrootview",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The rendering process goes through many points you can customize or take\nadvantage of. First thing IMA.js will want to render is a ",(0,r.jsx)(n.strong,{children:"DocumentView"}),"\nfollowed by ",(0,r.jsx)(n.strong,{children:"ViewAdapter"})," and ",(0,r.jsx)(n.strong,{children:"ManagedRootView"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:t(5341).A+"",width:"881",height:"421"})}),"\n",(0,r.jsx)(n.h2,{id:"documentview",children:"DocumentView"}),"\n",(0,r.jsx)(n.p,{children:"DocumentView is the root of your application's html markup and a mounting point\nfor all the views. It's only rendered at the server-side and then send to the\nclient with the application state inlined as a string. The application state is\nthen revived and your application re-rendered."}),"\n",(0,r.jsxs)(n.p,{children:["DocumentView component can be found in ",(0,r.jsx)(n.code,{children:"app/component/document/DocumentView.jsx"}),"\nand is registered in a file ",(0,r.jsx)(n.code,{children:"app/config/settings.js"})," in property\n",(0,r.jsx)(n.code,{children:"$Page.$Render.documentView"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/config/settings.js\n\nimport DocumentView from 'app/component/document/DocumentView';\n\nexport default (ns, oc, config) => {\n  return {\n    prod: {\n      // ...\n      $Page: {\n        $Render: {\n          // ...\n          documentView: DocumentView\n        }\n      }\n    }\n  };\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This configuration affects all pages across the\napplication. To change DocumentView for an individual route use option\n",(0,r.jsx)(n.code,{children:"documentView"})," when registering the route (See ",(0,r.jsx)(n.a,{href:"./routing/introduction#documentview",children:"Route options"}),"\nfor more information). This feature is extremely useful when creating pages\nthat are embedded in an iframe."]}),"\n",(0,r.jsxs)(n.p,{children:["If you take a closer look at the contents of the DocumentView you'll see it\nconsists of 3 main HTML elements (",(0,r.jsx)(n.code,{children:"div#page"}),", ",(0,r.jsx)(n.code,{children:"script#revivalSettings"})," and\n",(0,r.jsx)(n.code,{children:"script#scripts"}),"). For documentation about the MetaManager and how it's used in\nthe ",(0,r.jsx)(n.code,{children:"<meta/>"})," tags see the ",(0,r.jsx)(n.a,{href:"./seo-and-meta-manager",children:"SEO & MetaManager"})," page."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"div#page"})," - This is the actual point where your application ",(0,r.jsx)(n.strong,{children:"will mount"})," with the help of\n",(0,r.jsx)(n.strong,{children:"ViewAdapter"}),". The whole component tree (starting with the ViewAdapter) is\ncontained in the ",(0,r.jsx)(n.code,{children:"page"})," property and is embedded into the ",(0,r.jsx)(n.code,{children:"div#page"})," via\na React workaround ",(0,r.jsx)(n.code,{children:"dangerouslySetInnerHTML={{ __html: this.props.page }}"}),".\nYou're completely free to change the ",(0,r.jsx)(n.code,{children:"#page"})," ID of the div but IMA.js needs to know where\nthe mounting point is. Therefore there is a ",(0,r.jsx)(n.code,{children:"static get masterElementId()"}),"\nmethod that should return the ID as a ",(0,r.jsx)(n.code,{children:"string"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"script#revivalSettings"})," - Inside this ",(0,r.jsx)(n.code,{children:"<script/>"})," tag will be inlined the application state from the\nserver. The state is embedded into the script tag via the same workaround as\nthe component tree."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"script#scripts"})," - This ",(0,r.jsx)(n.code,{children:"<script/>"})," tags takes care of loading all the bundles you've defined in\n",(0,r.jsx)(n.a,{href:"/introduction/configuration#build-and-environment-configuration",children:(0,r.jsx)(n.code,{children:"app/build.js"})}),". It also\ntests if a client browser is capable of running ES6 version of the bundle. For\nmore details check the ",(0,r.jsx)(n.code,{children:"this.getAsyncScripts()"})," method."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"viewadapter",children:"ViewAdapter"}),"\n",(0,r.jsxs)(n.p,{children:["This component does exactly what it's named after. It serves as an adapter\nfor the current controller's ",(0,r.jsx)(n.strong,{children:"View"}),". The ViewAdapter receives 2 props:\n",(0,r.jsx)(n.code,{children:"state"})," object which holds the current page state and ",(0,r.jsx)(n.code,{children:"view"})," component that\nshould be rendered with the ",(0,r.jsx)(n.code,{children:"state"})," as input props."]}),"\n",(0,r.jsxs)(n.p,{children:["This component is also a great place for creating the React context by utilizing a\n",(0,r.jsx)(n.code,{children:"Provider"})," from ",(0,r.jsx)(n.code,{children:"React.createContext()"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If you want to customize the ViewAdapter you should extend the base\nViewAdapter from ",(0,r.jsx)(n.code,{children:"ima/page/renderer/ViewAdapter"})," and call superior\n",(0,r.jsx)(n.code,{children:"constructor"})," and ",(0,r.jsx)(n.code,{children:"render"})," method."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Custom ViewAdapter"})," can be applied the same way as DocumentView:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["In ",(0,r.jsx)(n.code,{children:"app/config/setting.js"})]}),"\n",(0,r.jsxs)(n.li,{children:["On a specific route by specifying it in the ",(0,r.jsx)(n.a,{href:"./routing/introduction#options",children:"route options"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app/config/settings.js\n\nimport DocumentView from 'app/component/document/DocumentView';\nimport CustomViewAdapter from 'app/page/CustomViewAdapter';\n\nexport default (ns, oc, config) => {\n  return {\n    prod: {\n      // ...\n      $Page: {\n        $Render: {\n          // ...\n          documentView: DocumentView,\n          viewAdapter: CustomViewAdapter\n        }\n      }\n    }\n  };\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"react-context",children:"React Context"}),"\n",(0,r.jsxs)(n.p,{children:["As we have mentioned above, ",(0,r.jsx)(n.strong,{children:"ViewAdapter"})," is the place to define React Context. Since ",(0,r.jsx)(n.strong,{children:"v17"})," IMA.js uses new React Context API. The context value contains property ",(0,r.jsx)(n.code,{children:"$Utils"})," with all registered utils from ",(0,r.jsx)(n.strong,{children:"ComponentUtils"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Context is defined in separate file and its ",(0,r.jsx)(n.strong,{children:"Provider"})," is rendered in ",(0,r.jsx)(n.strong,{children:"ViewAdapter"}),". Then the Context is used in ",(0,r.jsx)(n.strong,{children:"AbstractComponent"}),"\xa0in ",(0,r.jsx)(n.a,{href:"https://reactjs.org/docs/context.html#classcontexttype",children:(0,r.jsx)(n.code,{children:"static get contextType()"})}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"managedrootview",children:"ManagedRootView"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"ManagedRootView"})," is just another wrapper before rendering the actual\ncontroller view. Remember when we told you that the ",(0,r.jsx)(n.strong,{children:"ViewAdapter"})," is\nrendering the actual View? We lied ",(0,r.jsx)(n.code,{children:"\xaf\\_(\u30c4)_/\xaf"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If you're wondering what is the ManagedRootView good for, it's for creating\ncomponents that persist through the life of SPA and are not unmounted when the\nController or View changes. Good example of this is a page that displays a map\non one side and page content on the other (",(0,r.jsx)(n.a,{href:"https://en.mapy.cz/",children:"https://en.mapy.cz/"}),",\n",(0,r.jsx)(n.a,{href:"https://www.kiwi.com/en/search/",children:"https://www.kiwi.com/en/search/"}),", ",(0,r.jsx)(n.a,{href:"https://airbnb.com/",children:"https://airbnb.com/"}),")."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"// app/page/MapManagedRootView.js\n\nimport { BlankManagedRootView } from '@ima/core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Map from 'app/component/map/Map';\nimport MapResult from 'app/component/map/MapResult';\n\nexport default class MapManagedRootView extends BlankManagedRootView {\n\n  // ...\n\n  render() {\n    // Obtain search results and map settings from page state.\n    const {\xa0searchResults, mapType } = this.props;\n\n    return (\n      <React.Fragment>\n        {super.render()}\n        <Map\n          type = { mapType }\n          centerOnResults = { true }>\n          { searchResults.map(result => (\n            <MapResult place = { result }/>\n          ))}\n        </Map>\n      </React.Fragment>\n    );\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then the ",(0,r.jsx)(n.code,{children:"MapManagedRootView"})," can be used in ",(0,r.jsx)(n.code,{children:"app/config/setting.js"}),"\n(property ",(0,r.jsx)(n.code,{children:"managedRootView"}),") or in ",(0,r.jsx)(n.a,{href:"./routing/introduction#managedrootview",children:"route options"})," the same\nway as ",(0,r.jsx)(n.strong,{children:"DocumentView"})," or ",(0,r.jsx)(n.strong,{children:"ViewAdapter"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["As you may have notices ",(0,r.jsx)(n.code,{children:"MapManagedRootView"})," extends ",(0,r.jsx)(n.code,{children:"BlankManagedRootView"})," which is also the default ",(0,r.jsx)(n.strong,{children:"ManagedRootView"})," when you don't specify your own. ",(0,r.jsx)(n.code,{children:"render()"})," method of ",(0,r.jsx)(n.strong,{children:"BlankManagedRootView"})," simply renders View for current route with props containing current page state."]}),"\n",(0,r.jsxs)(n.p,{children:["Now when you know how a big part of the rendering process goes it's time to\nhave a look subsequent ",(0,r.jsx)(n.a,{href:"./views-and-components",children:"View and Component"})," rendering."]})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},5341:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/diagram-rendering-69394d1168548bc269a32e6893cc4fd4.png"},3023:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(3696);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);