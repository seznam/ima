"use strict";(self.webpackChunk_ima_docs=self.webpackChunk_ima_docs||[]).push([[9862],{703:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"tutorial/writing-posts","title":"Writing Posts","description":"Tutorial > Writing Posts","source":"@site/../docs/tutorial/writing-posts.mdx","sourceDirName":"tutorial","slug":"/tutorial/writing-posts","permalink":"/tutorial/writing-posts","draft":false,"unlisted":false,"editUrl":"https://github.com/seznam/ima/tree/master/docs/../docs/tutorial/writing-posts.mdx","tags":[],"version":"current","lastUpdatedBy":"Jan \u0160ime\u010dek","lastUpdatedAt":1761308686000,"frontMatter":{"title":"Writing Posts","description":"Tutorial > Writing Posts"},"sidebar":"tutorial","previous":{"title":"Fetching Data","permalink":"/tutorial/fetching-data"},"next":{"title":"Final Polish","permalink":"/tutorial/final-polish"}}');var r=n(2540),o=n(3023),a=n(3776),i=n(6052);const c={title:"Writing Posts",description:"Tutorial > Writing Posts"},l=void 0,h={},d=[{value:"Processing input from user",id:"processing-input-from-user",level:2},{value:"Updating the form",id:"updating-the-form",level:3},{value:"Firing EventBus events",id:"firing-eventbus-events",level:3},{value:"Capturing EventBus events",id:"capturing-eventbus-events",level:3},{value:"Updating our post service classes",id:"updating-our-post-service-classes",level:4},{value:"Defining the <code>onPostSubmitted</code> method",id:"defining-the-onpostsubmitted-method",level:4},{value:"Updating the API",id:"updating-the-api",level:3}];function p(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["In ",(0,r.jsx)(t.a,{href:"./fetching-data",children:"previous part"})," we created our classes and services to handle data fetching from server.\nWe also learned something about the vital parts of IMA.js - ",(0,r.jsx)(t.strong,{children:"object container"})," and ",(0,r.jsx)(t.strong,{children:"server-side rendering"}),".\nIn this smaller section of the tutorial, we're going to be processing input from user and\nsending those data to the server."]}),"\n",(0,r.jsx)(t.h2,{id:"processing-input-from-user",children:"Processing input from user"}),"\n",(0,r.jsx)(t.p,{children:"To write new posts, we need to address several issues:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Notifying the controller"})," that the user submitted the new post."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Sending the post"})," to our server via HTTP (remember, we don't have\nan actual REST API backend, so we're going to mock this)."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Waiting for our post"})," to be saved."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Showing the updated"})," list of posts."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["We want the controller to handle submitting posts to the guest book in our\napplication instead of the ",(0,r.jsx)(t.code,{children:"postingForm"})," component to ",(0,r.jsx)(t.strong,{children:'maintain a single\n"source of truth"'})," in our application. This should be the case for all\ninformation that is related to the page as a whole. ",(0,r.jsx)(t.strong,{children:"Local information"})," (for\nexample starting music playback when the user clicks the play button of some\nplayer component) may remain stored within the component itself, as it is not\nnecessarily important to the overall state of the page."]}),"\n",(0,r.jsxs)(t.p,{children:["We'll use another IMA.js service to notify the controller that the user\nsubmitted a new post - the ",(0,r.jsx)(t.strong,{children:"EventBus"}),". In case you did not read ",(0,r.jsx)(t.a,{href:"/tutorial/adding-some-state#notes-on-communication-between-controllers-and-views",children:"the details\nabout communication between the controller and the view"}),"\n, the EventBus is an internal event system, built on top of DOM events, used for communication like this."]}),"\n",(0,r.jsx)(t.h3,{id:"updating-the-form",children:"Updating the form"}),"\n",(0,r.jsxs)(t.p,{children:["First update the ",(0,r.jsx)(t.code,{children:"<form ..."})," markup in the view of our ",(0,r.jsx)(t.code,{children:"PostingForm"})," component\n(",(0,r.jsx)(t.code,{children:"app/component/postingForm/PostingForm"}),") by adding an ",(0,r.jsx)(t.code,{children:"onSubmit"})," event\nlistener:"]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(i.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",children:"<form action='' method='post' onSubmit={e => this._onSubmit(e)}>\n"})})}),(0,r.jsx)(i.A,{value:"TypeScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"<form action='' method='post' onSubmit={e => this._onSubmit(e)}>\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:["Then we need to hook our inputs to ",(0,r.jsx)(t.code,{children:"_onChange()"})," handler which will set the contents of\nthose input to the state of our ",(0,r.jsx)(t.code,{children:"PostingForm"})," component."]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(i.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",children:"<input\n  id='postForm-name'\n  className='form-control'\n  type='text'\n  name='author'\n  value={this.state.author}\n  onChange={e => this._onChange(e)}\n  placeholder='Your name'\n/>\n...\n<textarea\n  id='postForm-content'\n  className='form-control'\n  name='content'\n  value={this.state.content}\n  onChange={e => this._onChange(e)}\n  placeholder='What would you like to tell us?'\n/>\n"})})}),(0,r.jsx)(i.A,{value:"TypeScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"<input\n  id='postForm-name'\n  className='form-control'\n  type='text'\n  name='author'\n  value={this.state.author}\n  onChange={e => this._onChange(e)}\n  placeholder='Your name'\n/>\n...\n<textarea\n  id='postForm-content'\n  className='form-control'\n  name='content'\n  value={this.state.content}\n  onChange={e => this._onChange(e)}\n  placeholder='What would you like to tell us?'\n/>\n"})})})]}),"\n",(0,r.jsx)(t.p,{children:"We can't forget to define the default state for these two keys:"}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(i.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"#containerRef;\n\nconstructor(props, context) {\n  super(props, context);\n\n  this.#containerRef = createRef();\n\n  this.state = {\n    author: '',\n    content: '',\n  };\n}\n"})})}),(0,r.jsxs)(i.A,{value:"TypeScript",children:[(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"type Post = {\n  author: string;\n  content: string;\n};\n\nexport class PostingForm extends AbstractComponent<{}, Post> {\n  #containerRef: RefObject<HTMLDivElement>;\n\n  constructor(props: Post, context: Context<PageContextType>) {\n    super(props, context);\n    this.#containerRef = createRef();\n\n    this.state = {\n      author: '',\n      content: '',\n    };\n  }\n  ...\n}\n"})}),(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"TypeScript:"})," You need to also import ",(0,r.jsx)(t.code,{children:"PageContextType"})," from '@ima/react-page-renderer'."]}),"\n"]})]})]}),"\n",(0,r.jsxs)(t.p,{children:["Import the ",(0,r.jsx)(t.code,{children:"createRef"})," from React to the\nbeginning of the file:"]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(i.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import { createRef } from 'react';\n"})})}),(0,r.jsxs)(i.A,{value:"TypeScript",children:[(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { RefObject, createRef, Context } from 'react';\n"})}),(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"TypeScript:"})," For Typescript we need to import some additional types."]}),"\n"]})]})]}),"\n",(0,r.jsxs)(t.p,{children:["...and add ",(0,r.jsx)(t.code,{children:"ref={this.#containerRef}"})," to the first ",(0,r.jsx)(t.code,{children:"div"})," in the component:"]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(i.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"...\nrender() {\n  return (\n    <div className='posting-form card' ref={this.#containerRef}>\n      <form action='' method='post' onSubmit={e => this._onSubmit(e)}>\n        ...\n"})})}),(0,r.jsx)(i.A,{value:"TypeScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"...\nreturn (\n  <div className='posting-form card' ref={this.#containerRef}>\n    <form action='' method='post' onSubmit={e => this._onSubmit(e)}>\n      ...\n"})})})]}),"\n",(0,r.jsx)(t.p,{children:"This adds some internal state to our form component, which we'll maintain\nseparately from the main page state maintained by the home page controller."}),"\n",(0,r.jsxs)(t.p,{children:["Now we need to define the ",(0,r.jsx)(t.code,{children:"_onChange()"})," handler. We're going to use the\n",(0,r.jsx)(t.code,{children:"name"})," attribute of input and textarea fields so both can be handled by defining only one method.\nBut feel free to define ",(0,r.jsx)(t.code,{children:"onChange"})," handlers for each input separately, if that suits you better.\nOur ",(0,r.jsx)(t.code,{children:"_onChange()"})," handler will look like this:"]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(i.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"_onChange(event) {\n  this.setState({\n    [event.target.name]: event.target.value,\n  });\n}\n"})})}),(0,r.jsxs)(i.A,{value:"TypeScript",children:[(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"_onChange(event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\n  this.setState({\n    [event.target.name]: event.target.value,\n  } as Pick<Post, 'author' | 'content'>);\n}\n"})}),(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:["**TypeScript: ** You need to import ",(0,r.jsx)(t.code,{children:"ChangeEvent"})," from 'react'.\nWe know that ",(0,r.jsx)(t.code,{children:"event.target.name"})," is a key of our ",(0,r.jsx)(t.code,{children:"Post"})," type, therefore we can cast it to ",(0,r.jsx)(t.code,{children:"Pick<Post, keyof Post>"})," to avoid type errors.\nIn real applications, we would make the typing better."]}),"\n"]})]})]}),"\n",(0,r.jsxs)(t.p,{children:["The only thing that remains is to define the ",(0,r.jsx)(t.code,{children:"_onSubmit()"})," in our component:"]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(i.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"_onSubmit(event) {\n  event.preventDefault();\n\n  this.fire(this.#containerRef.current, 'postSubmitted', {\n    author: this.state.author,\n    content: this.state.content,\n  });\n\n  // Reset the state after submitting\n  this.setState({\n    author: '',\n    content: '',\n  });\n}\n"})})}),(0,r.jsxs)(i.A,{value:"TypeScript",children:[(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"\n_onSubmit(event: FormEvent<HTMLFormElement>) {\n  event.preventDefault();\n\n  this.fire(this.#containerRef.current!, 'postSubmitted', {\n    author: this.state.author,\n    content: this.state.content,\n  });\n\n  // Reset the state after submitting\n  this.setState({\n    author: '',\n    content: '',\n  });\n}\n"})}),(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:["**TypeScript: ** You need to import ",(0,r.jsx)(t.code,{children:"FormEvent"})," from 'react'."]}),"\n"]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"firing-eventbus-events",children:"Firing EventBus events"}),"\n",(0,r.jsxs)(t.p,{children:["We can ",(0,r.jsx)(t.strong,{children:"fire EventBus events"})," through ",(0,r.jsx)(t.code,{children:"this.fire()"})," method that is available\nto us by extending the ",(0,r.jsx)(t.code,{children:"AbstractComponent"}),". So in this example\nwe fire the ",(0,r.jsx)(t.code,{children:"postSubmitted"})," event through EventBus with the form data as\nthe event data, clear the form, and finally we prevent the browser from\nsubmitting the form to the server."]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"this.fire()"})," method is a ",(0,r.jsx)(t.strong,{children:"short-hand"})," for ",(0,r.jsx)(t.code,{children:"this.utils.$EventBus.fire(this, ...)"}),"\ncall, which fires the custom DOM event using the EventBus. The ",(0,r.jsx)(t.code,{children:"this.utils"}),"\nproperty is set to the view utils - various objects, data and services that\nare useful for rendering the UI - and is obtained from the React context.\nThe value returned by ",(0,r.jsx)(t.code,{children:"this.utils"})," is configurable in the\n",(0,r.jsx)(t.code,{children:"app/config/bind.js"})," configuration file and is represented by the constant\n",(0,r.jsx)(t.code,{children:"$Utils"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"capturing-eventbus-events",children:"Capturing EventBus events"}),"\n",(0,r.jsxs)(t.p,{children:["Now we need a way to capture the event in our home page controller, so open up\nthe home controller (the ",(0,r.jsx)(t.code,{children:"app/page/home/HomeController.js"})," file) and add the\nfollowing method:"]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(i.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"onPostSubmitted(eventData) {\n  // TODO\n}\n"})})}),(0,r.jsx)(i.A,{value:"TypeScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"onPostSubmitted(eventData: PostData) {\n  // TODO\n}\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:["The IMA.js will automatically invoke this method when the ",(0,r.jsx)(t.code,{children:"postSubmitted"})," event\nbus event occurs. For details on how this mechanism works, please refer to the\n",(0,r.jsx)(t.a,{href:"./adding-some-state#emitting-events-using-the-eventbus",children:"Emitting events using the EventBus"}),"\nsection of the third chapter of this tutorial."]}),"\n",(0,r.jsxs)(t.p,{children:["Notice that our ",(0,r.jsx)(t.code,{children:"onPostSubmitted()"})," event listener is a public method. This is\nbecause it represents the (event) interface for the view components."]}),"\n",(0,r.jsx)(t.h4,{id:"updating-our-post-service-classes",children:"Updating our post service classes"}),"\n",(0,r.jsxs)(t.p,{children:["Before we fill our ",(0,r.jsx)(t.code,{children:"onPostSubmitted()"})," event listener with content however,\nwe need to update our post model classes first. Open the post factory class (",(0,r.jsx)(t.code,{children:"app/model/post/PostFactory.js"}),")\nand add the following method for creating a single post:"]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(i.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"createEntity(entityData) {\n  return new PostEntity(entityData);\n}\n"})})}),(0,r.jsx)(i.A,{value:"TypeScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"createEntity(entityData: PostData): PostEntity {\n  return new PostEntity(entityData);\n}\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:["Since we don't like to repeat ourselves, update the ",(0,r.jsx)(t.code,{children:"return"})," statement in the\n",(0,r.jsx)(t.code,{children:"createList()"})," method as well:"]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(i.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"return entities.map(entityData => this.createEntity(entityData));\n"})})}),(0,r.jsx)(i.A,{value:"TypeScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"return entities.map((entityData: PostData) => this.createEntity(entityData));\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:["Now add the following method for creating new posts to the post resource\n(",(0,r.jsx)(t.code,{children:"app/model/post/PostResource.js"}),"):"]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(i.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"createPost(postData) {\n  return this._http\n    .post('http://localhost:3001/static/static/public/api/posts.json', postData)\n    .then(response => this._factory.createEntity(response.body));\n}\n"})})}),(0,r.jsx)(i.A,{value:"TypeScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"type PostApiCreateResponse = {\n  body: PostData;\n};\n\nexport class PostResource {\n  ...\n\n  createPost(postData: PostData): Promise<PostEntity> {\n    return this._http\n      .post('http://localhost:3001/static/static/public/api/posts.json', postData)\n      .then((response: PostApiCreateResponse) =>\n        this._factory.createEntity(response.body)\n      );\n  }\n}\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:["This method accepts a plain object containing the new post data and submits\nthem to the server using an HTTP POST request. The ",(0,r.jsx)(t.code,{children:"_http.post()"})," method sends\nthe HTTP POST request and returns a promise that resolves to the server's\nresponse with the response body parsed as JSON. We then use the server's\nresponse to create a post entity representing the saved post."]}),"\n",(0,r.jsxs)(t.p,{children:["Next we need to create a method for creating posts in our post service\n(",(0,r.jsx)(t.code,{children:"app/model/post/PostService.js"}),"):"]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(i.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"createPost(postData) {\n  postData.id = null;\n  return this._resource.createPost(postData);\n}\n"})})}),(0,r.jsx)(i.A,{value:"TypeScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { PostData } from 'app/page/home/HomeController';\n\nexport class PostService {\n  ...\n  createPost(postData: PostData): Promise<PostEntity> {\n    postData.id = null;\n    return this._resource.createPost(postData);\n  }\n}\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:["This method sets the ",(0,r.jsx)(t.code,{children:"id"})," field to ",(0,r.jsx)(t.code,{children:"null"})," as it is expected for posts that were\nnot created yet (the post IDs should be generated by our backend) and uses the\npost resource to create the post. The method returns a promise that resolves to\nthe post entity representing the created post."]}),"\n",(0,r.jsxs)(t.h4,{id:"defining-the-onpostsubmitted-method",children:["Defining the ",(0,r.jsx)(t.code,{children:"onPostSubmitted"})," method"]}),"\n",(0,r.jsxs)(t.p,{children:["With that in place, we can now fill in the contents of the ",(0,r.jsx)(t.code,{children:"onPostSubmitted()"}),"\nevent listener in the home page controller (",(0,r.jsx)(t.code,{children:"app/page/home/HomeController.js"}),"):"]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(i.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"this._postService\n  .createPost(eventData)\n  .then(() => this._postService.getPosts())\n  .then(posts => this.setState({ posts }));\n"})})}),(0,r.jsx)(i.A,{value:"TypeScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"this._postService\n  .createPost(eventData)\n  .then(() => this._postService.getPosts())\n  .then((posts: PostData[]) => this.setState({ posts }));\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:["This snippet calls the ",(0,r.jsx)(t.code,{children:"createPost()"})," method with our event data, waits for the\npost to be created, then requests the current list of posts from the post\nservice and updates the ",(0,r.jsx)(t.code,{children:"posts"})," field in the view's state using the\n",(0,r.jsx)(t.code,{children:"setState()"})," method. The ",(0,r.jsx)(t.code,{children:"setState()"})," method updated only the fields of the\nstate that are present in the provided state object without modifying the rest,\nand notifies the view about the new state so that the view is re-rendered."]}),"\n",(0,r.jsx)(t.h3,{id:"updating-the-api",children:"Updating the API"}),"\n",(0,r.jsx)(t.p,{children:"Now that everything is wired up, we can start submitting new posts, right?\nWell, not so fast. Remember, we do not have an actual REST API backend, so the\nHTTP POST request will fail and no new post will be created."}),"\n",(0,r.jsxs)(t.p,{children:["Since we don't want to implement an actual backend, we will work around this\nissue by implementing a ",(0,r.jsx)(t.a,{href:"http://en.wikipedia.org/wiki/Mock_object",children:"mock"})," ",(0,r.jsx)(t.strong,{children:"HTTP agent"})," that fetches the posts from the server and then acts as if sending\nsubsequent requests to the server while managing our state (the created posts)\nlocally and creating responses on spot without any actual communication with\nthe server. This approach is useful for both tests and our simple tutorial."]}),"\n",(0,r.jsxs)(t.p,{children:["To create our HTTP mock create the ",(0,r.jsx)(t.code,{children:"app/mock"})," directory and the\n",(0,r.jsx)(t.code,{children:"app/mock/MockHttpAgent.js"})," () file with the following content:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import { HttpAgentImpl } from '@ima/core';\n\nconst GET_DELAY = 70; // milliseconds\nconst POST_DELAY = 90; // milliseconds\n\nexport default class MockHttpAgent extends HttpAgentImpl {\n  static get $dependencies() {\n    return ['$HttpAgentProxy', '$Cache', '$CookieStorage', '$Settings.$Http'];\n  }\n\n  constructor(proxy, cache, cookie, config) {\n    super(proxy, cache, cookie, config);\n\n    this._posts = null;\n  }\n\n  get(url, data, options = {}) {\n    if (!this._posts) {\n      return super.get(url, data, options).then(response => {\n        this._posts = response.body;\n\n        return {\n          body: this._posts.map(post => Object.assign({}, post)),\n        };\n      });\n    }\n\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          body: this._posts.map(post => Object.assign({}, post)),\n        });\n      }, GET_DELAY);\n    });\n  }\n\n  post(url, data, options = {}) {\n    if (!this._posts) {\n      return this.get(url, {}).then(() => this.post(url, data, options));\n    }\n\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let clone = Object.assign({}, data);\n\n        clone.id = this._posts[0].id + 1;\n        this._posts.unshift(clone);\n\n        resolve({\n          body: Object.assign({}, clone),\n        });\n      }, POST_DELAY);\n    });\n  }\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Let's take this class apart and take a look at what it does. We extend the\n",(0,r.jsx)(t.code,{children:"ima/http/HttpAgent"})," class which is the HTTP agent provided by IMA.js, so\nwe need to obtain its dependencies in our constructor\n(",(0,r.jsx)(t.code,{children:"proxy, cache, cookie, config"}),") and pass them to the super-constructor."]}),"\n",(0,r.jsxs)(t.p,{children:["Next we set up the ",(0,r.jsx)(t.code,{children:"_posts"})," field that we'll use to keep track of all posts and few REST API methods:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsxs)(t.strong,{children:["The ",(0,r.jsx)(t.code,{children:"get()"})," method"]})," checks whether we already have the posts fetched from the\nserver, and, if we don't, it uses the super-implementation to fetch them and\nstore them in the ",(0,r.jsx)(t.code,{children:"_posts"})," field. If the posts have already been fetched, the\nmethod returns a promise that resolves to a clone of the posts after the\nconfigured delay."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsxs)(t.strong,{children:["The ",(0,r.jsx)(t.code,{children:"post()"})," method"]})," checks whether we already have the posts fetched from the\nserver, and, if we don't, it fetches them using the ",(0,r.jsx)(t.code,{children:"get()"})," method and then\ncalls itself again. If we already have the posts fetched, the method clones the\ndata passed to it in parameters, generates an ID, stores the new record as the\nfirst element of the ",(0,r.jsx)(t.code,{children:"_posts"})," array while shifting the rest of the posts and\nresolves the returned promise after the configured delay to the stored post."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["We included the delays in our ",(0,r.jsx)(t.code,{children:"get()"})," and ",(0,r.jsx)(t.code,{children:"post()"})," methods to simulate the\nlatency imposed by a real networking. Also notice how we always clone the data\nwe receive before storing them internally and return only clones of our\ninternal posts storage. This is to emulate the server behavior reliably, so\nthat new posts won't modify previously returned post arrays and later\nmodifications of data passed to or received from our mock server won't modify\nthe internal state or data returned by other calls to our methods."]}),"\n",(0,r.jsxs)(t.p,{children:["To wire up our HTTP mock into our application, we need to update the dependencies of the ",(0,r.jsx)(t.code,{children:"app/model/post/PostResource.js"}),":"]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(i.A,{value:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import PostFactory from './PostFactory';\nimport MockHttpAgent from 'app/mock/MockHttpAgent';\n\nexport default class PostResource {\n  static get $dependencies() {\n    return [MockHttpAgent, PostFactory];\n  }\n\n  ...\n}\n"})})}),(0,r.jsxs)(i.A,{value:"TypeScript",children:[(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import MockHttpAgent from 'app/mock/MockHttpAgent';\n\nexport class PostResource {\n  // @ts-expect-error\n  static $dependencies: Dependencies = [MockHttpAgent, PostFactory];\n\n  declare _http: MockHttpAgent;\n  ...\n  constructor(http: MockHttpAgent, factory: PostFactory) {\n    ...\n  }\n  ...\n}\n"})}),(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"TypeScript:"})," Because we are using only mock HttpAgent written in plain JavaScript\n(it would be quite difficult to properly typed that), we need to use ",(0,r.jsx)(t.code,{children:"@ts-expect-error"})," to suppress TypeScript error."]}),"\n"]})]})]}),"\n",(0,r.jsx)(t.p,{children:"Go ahead and check the result in the browser, you will now be able to write new\nposts to our guestbook (which will disappear once you reload the page, since we\nkeep the posts only in our HTTP mock)."})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},6052:(e,t,n)=>{n.d(t,{A:()=>a});n(3696);var s=n(2689);const r={tabItem:"tabItem_wHwb"};var o=n(2540);function a(e){let{children:t,hidden:n,className:a}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,a),hidden:n,children:t})}},3776:(e,t,n)=>{n.d(t,{A:()=>w});var s=n(3696),r=n(2689),o=n(3707),a=n(9519),i=n(3604),c=n(5196),l=n(6229),h=n(8030);function d(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:s,default:r}}=e;return{value:t,label:n,attributes:s,default:r}}))}(n);return function(e){const t=(0,l.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function u(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const r=(0,a.W6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c.aZ)(o),(0,s.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function x(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=p(e),[a,c]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:o}))),[l,d]=m({queryString:n,groupId:r}),[x,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,h.Dv)(n);return[r,(0,s.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),j=(()=>{const e=l??x;return u({value:e,tabValues:o})?e:null})();(0,i.A)((()=>{j&&c(j)}),[j]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!u({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);c(e),d(e),g(e)}),[d,g,o]),tabValues:o}}var g=n(5200);const j={tabList:"tabList_J5MA",tabItem:"tabItem_l0OV"};var f=n(2540);function v(e){let{className:t,block:n,selectedValue:s,selectValue:a,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,o.a_)(),h=e=>{const t=e.currentTarget,n=c.indexOf(t),r=i[n].value;r!==s&&(l(t),a(r))},d=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:o}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:e=>{c.push(e)},onKeyDown:d,onClick:h,...o,className:(0,r.A)("tabs__item",j.tabItem,o?.className,{"tabs__item--active":s===t}),children:n??t},t)}))})}function b(e){let{lazy:t,children:n,selectedValue:o}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===o));return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:a.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==o})))})}function y(e){const t=x(e);return(0,f.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,f.jsx)(v,{...t,...e}),(0,f.jsx)(b,{...t,...e})]})}function w(e){const t=(0,g.A)();return(0,f.jsx)(y,{...e,children:d(e.children)},String(t))}},3023:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var s=n(3696);const r={},o=s.createContext(r);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);